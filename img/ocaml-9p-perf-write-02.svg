<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1000" height="638" onload="init(evt)" viewBox="0 0 1000 638" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1000.0" height="638.0" fill="url(#background)"  />
<text id="title" x="500.00" y="24" >nullFS write test</text>
<text id="subtitle" x="500.00" y="48" >dd if=/dev/zero of=nullfs/null bs=6k count=1000000</text>
<text id="details" x="10.00" y="621" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="890.00" y="24" >Search</text>
<text id="ignorecase" x="974.00" y="24" >ic</text>
<text id="matched" x="890.00" y="621" > </text>
<g id="frames">
<g >
<title>schedule (2,994 samples, 8.34%)</title><rect x="337.4" y="269" width="81.7" height="15.0" fill="rgb(229,25,42)" rx="2" ry="2" />
<text  x="340.38" y="279.5" >schedule</text>
</g>
<g >
<title>vfs_readv (13,014 samples, 36.24%)</title><rect x="515.1" y="269" width="355.1" height="15.0" fill="rgb(215,224,3)" rx="2" ry="2" />
<text  x="518.05" y="279.5" >vfs_readv</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (18,009 samples, 50.15%)</title><rect x="467.6" y="317" width="491.5" height="15.0" fill="rgb(252,183,29)" rx="2" ry="2" />
<text  x="470.56" y="327.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__wake_up_common_lock (2,114 samples, 5.89%)</title><rect x="575.0" y="77" width="57.7" height="15.0" fill="rgb(213,192,0)" rx="2" ry="2" />
<text  x="578.01" y="87.5" >__wake..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9,454 samples, 26.33%)</title><rect x="163.5" y="317" width="258.0" height="15.0" fill="rgb(238,51,27)" rx="2" ry="2" />
<text  x="166.47" y="327.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>skb_release_head_state (2,427 samples, 6.76%)</title><rect x="566.6" y="141" width="66.2" height="15.0" fill="rgb(213,27,36)" rx="2" ry="2" />
<text  x="569.61" y="151.5" >skb_rel..</text>
</g>
<g >
<title>__libc_start_main (33,802 samples, 94.14%)</title><rect x="55.8" y="541" width="922.5" height="15.0" fill="rgb(253,91,50)" rx="2" ry="2" />
<text  x="58.77" y="551.5" >__libc_start_main</text>
</g>
<g >
<title>sock_write_iter (3,694 samples, 10.29%)</title><rect x="218.0" y="221" width="100.8" height="15.0" fill="rgb(236,81,21)" rx="2" ry="2" />
<text  x="221.00" y="231.5" >sock_write_i..</text>
</g>
<g >
<title>nullfs_test.exe (35,907 samples, 100.00%)</title><rect x="10.0" y="573" width="980.0" height="15.0" fill="rgb(205,20,43)" rx="2" ry="2" />
<text  x="13.00" y="583.5" >nullfs_test.exe</text>
</g>
<g >
<title>iovec_writev (10,441 samples, 29.08%)</title><rect x="156.6" y="349" width="285.0" height="15.0" fill="rgb(234,17,21)" rx="2" ry="2" />
<text  x="159.62" y="359.5" >iovec_writev</text>
</g>
<g >
<title>unix_stream_sendmsg (3,378 samples, 9.41%)</title><rect x="226.6" y="189" width="92.2" height="15.0" fill="rgb(214,107,37)" rx="2" ry="2" />
<text  x="229.62" y="199.5" >unix_stream..</text>
</g>
<g >
<title>caml_startup_exn (33,802 samples, 94.14%)</title><rect x="55.8" y="493" width="922.5" height="15.0" fill="rgb(224,156,28)" rx="2" ry="2" />
<text  x="58.77" y="503.5" >caml_startup_exn</text>
</g>
<g >
<title>do_iter_readv_writev (12,220 samples, 34.03%)</title><rect x="518.4" y="237" width="333.5" height="15.0" fill="rgb(245,3,14)" rx="2" ry="2" />
<text  x="521.41" y="247.5" >do_iter_readv_writev</text>
</g>
<g >
<title>main (33,802 samples, 94.14%)</title><rect x="55.8" y="525" width="922.5" height="15.0" fill="rgb(214,37,19)" rx="2" ry="2" />
<text  x="58.77" y="535.5" >main</text>
</g>
<g >
<title>_start (33,802 samples, 94.14%)</title><rect x="55.8" y="557" width="922.5" height="15.0" fill="rgb(207,167,48)" rx="2" ry="2" />
<text  x="58.77" y="567.5" >_start</text>
</g>
<g >
<title>caml_startup (33,802 samples, 94.14%)</title><rect x="55.8" y="509" width="922.5" height="15.0" fill="rgb(208,172,29)" rx="2" ry="2" />
<text  x="58.77" y="519.5" >caml_startup</text>
</g>
<g >
<title>consume_skb (3,102 samples, 8.64%)</title><rect x="556.0" y="173" width="84.7" height="15.0" fill="rgb(231,76,10)" rx="2" ry="2" />
<text  x="559.02" y="183.5" >consume_skb</text>
</g>
<g >
<title>caml_start_program (33,802 samples, 94.14%)</title><rect x="55.8" y="461" width="922.5" height="15.0" fill="rgb(248,9,25)" rx="2" ry="2" />
<text  x="58.77" y="471.5" >caml_start_program</text>
</g>
<g >
<title>caml_program (33,802 samples, 94.14%)</title><rect x="55.8" y="445" width="922.5" height="15.0" fill="rgb(253,103,15)" rx="2" ry="2" />
<text  x="58.77" y="455.5" >caml_program</text>
</g>
<g >
<title>sock_read_iter (12,153 samples, 33.85%)</title><rect x="520.2" y="221" width="331.7" height="15.0" fill="rgb(234,194,47)" rx="2" ry="2" />
<text  x="523.24" y="231.5" >sock_read_iter</text>
</g>
<g >
<title>do_iter_read (12,805 samples, 35.66%)</title><rect x="516.4" y="253" width="349.5" height="15.0" fill="rgb(235,167,18)" rx="2" ry="2" />
<text  x="519.39" y="263.5" >do_iter_read</text>
</g>
<g >
<title>do_iter_write (4,334 samples, 12.07%)</title><rect x="213.4" y="253" width="118.3" height="15.0" fill="rgb(228,197,32)" rx="2" ry="2" />
<text  x="216.39" y="263.5" >do_iter_write</text>
</g>
<g >
<title>skb_release_all (2,431 samples, 6.77%)</title><rect x="566.5" y="157" width="66.3" height="15.0" fill="rgb(206,18,27)" rx="2" ry="2" />
<text  x="569.50" y="167.5" >skb_rel..</text>
</g>
<g >
<title>unix_stream_recvmsg (11,823 samples, 32.93%)</title><rect x="529.2" y="205" width="322.7" height="15.0" fill="rgb(222,211,14)" rx="2" ry="2" />
<text  x="532.24" y="215.5" >unix_stream_recvmsg</text>
</g>
<g >
<title>__wake_up_common (1,938 samples, 5.40%)</title><rect x="575.6" y="61" width="52.9" height="15.0" fill="rgb(234,178,30)" rx="2" ry="2" />
<text  x="578.64" y="71.5" >__wak..</text>
</g>
<g >
<title>camlStyx__Proto__fold_left_1531 (14,000 samples, 38.99%)</title><rect x="60.0" y="381" width="382.1" height="15.0" fill="rgb(252,36,45)" rx="2" ry="2" />
<text  x="62.97" y="391.5" >camlStyx__Proto__fold_left_1531</text>
</g>
<g >
<title>__sched_text_start (2,964 samples, 8.25%)</title><rect x="338.2" y="253" width="80.9" height="15.0" fill="rgb(247,106,7)" rx="2" ry="2" />
<text  x="341.20" y="263.5" >__sched_t..</text>
</g>
<g >
<title>unix_destruct_scm (2,417 samples, 6.73%)</title><rect x="566.9" y="125" width="65.9" height="15.0" fill="rgb(226,168,9)" rx="2" ry="2" />
<text  x="569.88" y="135.5" >unix_de..</text>
</g>
<g >
<title>schedule (3,085 samples, 8.59%)</title><rect x="872.1" y="269" width="84.2" height="15.0" fill="rgb(207,79,24)" rx="2" ry="2" />
<text  x="875.12" y="279.5" >schedule</text>
</g>
<g >
<title>__writev (10,012 samples, 27.88%)</title><rect x="158.1" y="333" width="273.3" height="15.0" fill="rgb(223,101,33)" rx="2" ry="2" />
<text  x="161.14" y="343.5" >__writev</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__entry (33,802 samples, 94.14%)</title><rect x="55.8" y="429" width="922.5" height="15.0" fill="rgb(251,161,29)" rx="2" ry="2" />
<text  x="58.77" y="439.5" >camlDune__exe__Nullfs_test__entry</text>
</g>
<g >
<title>camlStyx__fill_buffer_1247 (19,588 samples, 54.55%)</title><rect x="443.0" y="365" width="534.6" height="15.0" fill="rgb(236,137,28)" rx="2" ry="2" />
<text  x="446.03" y="375.5" >camlStyx__fill_buffer_1247</text>
</g>
<g >
<title>sock_sendmsg (3,627 samples, 10.10%)</title><rect x="219.8" y="205" width="99.0" height="15.0" fill="rgb(232,165,11)" rx="2" ry="2" />
<text  x="222.83" y="215.5" >sock_sendmsg</text>
</g>
<g >
<title>schedule (5,066 samples, 14.11%)</title><rect x="665.5" y="157" width="138.3" height="15.0" fill="rgb(227,107,53)" rx="2" ry="2" />
<text  x="668.49" y="167.5" >schedule</text>
</g>
<g >
<title>vfs_writev (4,527 samples, 12.61%)</title><rect x="211.7" y="269" width="123.5" height="15.0" fill="rgb(243,70,19)" rx="2" ry="2" />
<text  x="214.69" y="279.5" >vfs_writev</text>
</g>
<g >
<title>__sched_text_start (5,036 samples, 14.03%)</title><rect x="666.3" y="141" width="137.5" height="15.0" fill="rgb(225,140,20)" rx="2" ry="2" />
<text  x="669.31" y="151.5" >__sched_text_start</text>
</g>
<g >
<title>all (35,907 samples, 100%)</title><rect x="10.0" y="589" width="980.0" height="15.0" fill="rgb(226,21,28)" rx="2" ry="2" />
<text  x="13.00" y="599.5" ></text>
</g>
<g >
<title>iovec_readv (19,056 samples, 53.07%)</title><rect x="457.5" y="349" width="520.1" height="15.0" fill="rgb(235,105,8)" rx="2" ry="2" />
<text  x="460.55" y="359.5" >iovec_readv</text>
</g>
<g >
<title>do_readv (13,261 samples, 36.93%)</title><rect x="508.3" y="285" width="361.9" height="15.0" fill="rgb(211,92,48)" rx="2" ry="2" />
<text  x="511.31" y="295.5" >do_readv</text>
</g>
<g >
<title>__sched_text_start (3,063 samples, 8.53%)</title><rect x="872.7" y="253" width="83.6" height="15.0" fill="rgb(245,95,5)" rx="2" ry="2" />
<text  x="875.72" y="263.5" >__sched_t..</text>
</g>
<g >
<title>do_writev (4,735 samples, 13.19%)</title><rect x="206.0" y="285" width="129.2" height="15.0" fill="rgb(236,4,14)" rx="2" ry="2" />
<text  x="209.02" y="295.5" >do_writev</text>
</g>
<g >
<title>__GI___readv (18,655 samples, 51.95%)</title><rect x="460.0" y="333" width="509.1" height="15.0" fill="rgb(209,88,40)" rx="2" ry="2" />
<text  x="463.00" y="343.5" >__GI___readv</text>
</g>
<g >
<title>camlStyx__handle_1730 (19,623 samples, 54.65%)</title><rect x="442.1" y="381" width="535.5" height="15.0" fill="rgb(228,6,20)" rx="2" ry="2" />
<text  x="445.07" y="391.5" >camlStyx__handle_1730</text>
</g>
<g >
<title>do_syscall_64 (9,428 samples, 26.26%)</title><rect x="164.2" y="301" width="257.3" height="15.0" fill="rgb(254,38,5)" rx="2" ry="2" />
<text  x="167.18" y="311.5" >do_syscall_64</text>
</g>
<g >
<title>do_syscall_64 (17,988 samples, 50.10%)</title><rect x="468.1" y="301" width="491.0" height="15.0" fill="rgb(222,28,39)" rx="2" ry="2" />
<text  x="471.14" y="311.5" >do_syscall_64</text>
</g>
<g >
<title>do_iter_readv_writev (3,810 samples, 10.61%)</title><rect x="214.8" y="237" width="104.0" height="15.0" fill="rgb(254,218,22)" rx="2" ry="2" />
<text  x="217.83" y="247.5" >do_iter_read..</text>
</g>
<g >
<title>unix_write_space (2,181 samples, 6.07%)</title><rect x="573.3" y="93" width="59.5" height="15.0" fill="rgb(250,44,36)" rx="2" ry="2" />
<text  x="576.32" y="103.5" >unix_w..</text>
</g>
<g >
<title>caml_startup_common (33,802 samples, 94.14%)</title><rect x="55.8" y="477" width="922.5" height="15.0" fill="rgb(242,146,4)" rx="2" ry="2" />
<text  x="58.77" y="487.5" >caml_startup_common</text>
</g>
<g >
<title>unix_stream_read_generic (11,765 samples, 32.77%)</title><rect x="530.8" y="189" width="321.1" height="15.0" fill="rgb(254,170,40)" rx="2" ry="2" />
<text  x="533.83" y="199.5" >unix_stream_read_generic</text>
</g>
<g >
<title>camlStyx__handle_1730 (12,750 samples, 35.51%)</title><rect x="93.7" y="365" width="347.9" height="15.0" fill="rgb(207,144,19)" rx="2" ry="2" />
<text  x="96.65" y="375.5" >camlStyx__handle_1730</text>
</g>
<g >
<title>exit_to_usermode_loop (3,154 samples, 8.78%)</title><rect x="870.2" y="285" width="86.1" height="15.0" fill="rgb(210,131,45)" rx="2" ry="2" />
<text  x="873.24" y="295.5" >exit_to_us..</text>
</g>
<g >
<title>camlStyx__loop_1761 (33,802 samples, 94.14%)</title><rect x="55.8" y="397" width="922.5" height="15.0" fill="rgb(252,198,38)" rx="2" ry="2" />
<text  x="58.77" y="407.5" >camlStyx__loop_1761</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__serve_221 (33,802 samples, 94.14%)</title><rect x="55.8" y="413" width="922.5" height="15.0" fill="rgb(211,49,18)" rx="2" ry="2" />
<text  x="58.77" y="423.5" >camlDune__exe__Nullfs_test__serve_221</text>
</g>
<g >
<title>exit_to_usermode_loop (3,072 samples, 8.56%)</title><rect x="335.2" y="285" width="83.9" height="15.0" fill="rgb(251,216,11)" rx="2" ry="2" />
<text  x="338.25" y="295.5" >exit_to_u..</text>
</g>
<g >
<title>schedule_timeout (5,174 samples, 14.41%)</title><rect x="662.5" y="173" width="141.3" height="15.0" fill="rgb(215,82,19)" rx="2" ry="2" />
<text  x="665.54" y="183.5" >schedule_timeout</text>
</g>
<g >
<title>sock_wfree (2,336 samples, 6.51%)</title><rect x="569.1" y="109" width="63.7" height="15.0" fill="rgb(207,107,30)" rx="2" ry="2" />
<text  x="572.09" y="119.5" >sock_wf..</text>
</g>
<g >
<title>dequeue_task_fair (1,876 samples, 5.22%)</title><rect x="698.7" y="125" width="51.2" height="15.0" fill="rgb(244,193,24)" rx="2" ry="2" />
<text  x="701.73" y="135.5" >deque..</text>
</g>
</g>
</svg>
