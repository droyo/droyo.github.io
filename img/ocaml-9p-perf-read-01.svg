<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>vfs_readv (8,108 samples, 21.94%)</title><rect x="287.3" y="341" width="258.9" height="15.0" fill="rgb(219,201,44)" rx="2" ry="2" />
<text  x="290.34" y="351.5" >vfs_readv</text>
</g>
<g >
<title>amd_pmu_disable_all (2,068 samples, 5.60%)</title><rect x="1031.6" y="133" width="66.0" height="15.0" fill="rgb(231,52,24)" rx="2" ry="2" />
<text  x="1034.59" y="143.5" >amd_pmu..</text>
</g>
<g >
<title>__schedule (4,090 samples, 11.07%)</title><rect x="1024.5" y="165" width="130.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1027.50" y="175.5" >__schedule</text>
</g>
<g >
<title>do_syscall_64 (8,301 samples, 22.46%)</title><rect x="281.6" y="373" width="265.0" height="15.0" fill="rgb(226,160,13)" rx="2" ry="2" />
<text  x="284.62" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>psi_group_change (398 samples, 1.08%)</title><rect x="1140.0" y="133" width="12.7" height="15.0" fill="rgb(251,187,5)" rx="2" ry="2" />
<text  x="1142.97" y="143.5" ></text>
</g>
<g >
<title>camlStyx__f_2232 (35,887 samples, 97.09%)</title><rect x="40.1" y="453" width="1145.7" height="15.0" fill="rgb(249,117,11)" rx="2" ry="2" />
<text  x="43.14" y="463.5" >camlStyx__f_2232</text>
</g>
<g >
<title>put_prev_entity (396 samples, 1.07%)</title><rect x="1120.4" y="133" width="12.6" height="15.0" fill="rgb(209,206,43)" rx="2" ry="2" />
<text  x="1123.37" y="143.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (925 samples, 2.50%)</title><rect x="374.3" y="53" width="29.6" height="15.0" fill="rgb(235,8,19)" rx="2" ry="2" />
<text  x="377.33" y="63.5" >x8..</text>
</g>
<g >
<title>preempt_schedule_thunk (2,336 samples, 6.32%)</title><rect x="360.7" y="133" width="74.5" height="15.0" fill="rgb(205,143,1)" rx="2" ry="2" />
<text  x="363.67" y="143.5" >preempt_..</text>
</g>
<g >
<title>prep_new_page (2,329 samples, 6.30%)</title><rect x="830.1" y="181" width="74.4" height="15.0" fill="rgb(208,162,9)" rx="2" ry="2" />
<text  x="833.14" y="191.5" >prep_new..</text>
</g>
<g >
<title>pick_next_task_fair (625 samples, 1.69%)</title><rect x="1116.7" y="149" width="20.0" height="15.0" fill="rgb(235,166,19)" rx="2" ry="2" />
<text  x="1119.70" y="159.5" ></text>
</g>
<g >
<title>camlStyx__Proto__alloc_1281 (373 samples, 1.01%)</title><rect x="246.0" y="437" width="11.9" height="15.0" fill="rgb(216,146,46)" rx="2" ry="2" />
<text  x="248.99" y="447.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (463 samples, 1.25%)</title><rect x="1100.2" y="133" width="14.8" height="15.0" fill="rgb(230,10,21)" rx="2" ry="2" />
<text  x="1103.19" y="143.5" ></text>
</g>
<g >
<title>caml_program (36,802 samples, 99.57%)</title><rect x="12.6" y="533" width="1174.9" height="15.0" fill="rgb(223,11,31)" rx="2" ry="2" />
<text  x="15.62" y="543.5" >caml_program</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,357 samples, 6.38%)</title><rect x="360.0" y="149" width="75.2" height="15.0" fill="rgb(249,72,19)" rx="2" ry="2" />
<text  x="363.00" y="159.5" >_raw_spi..</text>
</g>
<g >
<title>__wake_up_common_lock (5,728 samples, 15.50%)</title><rect x="972.2" y="229" width="182.9" height="15.0" fill="rgb(254,222,4)" rx="2" ry="2" />
<text  x="975.20" y="239.5" >__wake_up_common_lock</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__entry (36,802 samples, 99.57%)</title><rect x="12.6" y="517" width="1174.9" height="15.0" fill="rgb(250,85,21)" rx="2" ry="2" />
<text  x="15.62" y="527.5" >camlDune__exe__Nullfs_test__entry</text>
</g>
<g >
<title>do_syscall_64 (16,887 samples, 45.69%)</title><rect x="623.2" y="373" width="539.1" height="15.0" fill="rgb(216,166,24)" rx="2" ry="2" />
<text  x="626.19" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>__perf_event_task_sched_in (316 samples, 0.85%)</title><rect x="508.5" y="181" width="10.1" height="15.0" fill="rgb(245,122,42)" rx="2" ry="2" />
<text  x="511.55" y="191.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3,252 samples, 8.80%)</title><rect x="331.4" y="165" width="103.8" height="15.0" fill="rgb(241,54,24)" rx="2" ry="2" />
<text  x="334.43" y="175.5" >__wake_up_co..</text>
</g>
<g >
<title>native_write_msr (471 samples, 1.27%)</title><rect x="388.8" y="37" width="15.1" height="15.0" fill="rgb(226,35,11)" rx="2" ry="2" />
<text  x="391.83" y="47.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (7,678 samples, 20.77%)</title><rect x="296.3" y="261" width="245.2" height="15.0" fill="rgb(238,160,35)" rx="2" ry="2" />
<text  x="299.34" y="271.5" >unix_stream_read_generic</text>
</g>
<g >
<title>visit_groups_merge.constprop.0.isra.0 (365 samples, 0.99%)</title><rect x="1102.1" y="101" width="11.7" height="15.0" fill="rgb(211,4,30)" rx="2" ry="2" />
<text  x="1105.11" y="111.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5,029 samples, 13.61%)</title><rect x="59.4" y="389" width="160.6" height="15.0" fill="rgb(208,163,33)" rx="2" ry="2" />
<text  x="62.42" y="399.5" >__memset_avx2_unalig..</text>
</g>
<g >
<title>psi_task_switch (503 samples, 1.36%)</title><rect x="1136.7" y="149" width="16.0" height="15.0" fill="rgb(244,184,12)" rx="2" ry="2" />
<text  x="1139.65" y="159.5" ></text>
</g>
<g >
<title>p9_pollwake (1,382 samples, 3.74%)</title><rect x="975.6" y="197" width="44.1" height="15.0" fill="rgb(210,33,33)" rx="2" ry="2" />
<text  x="978.59" y="207.5" >p9_p..</text>
</g>
<g >
<title>kmem_cache_alloc_node (569 samples, 1.54%)</title><rect x="946.8" y="197" width="18.1" height="15.0" fill="rgb(242,118,10)" rx="2" ry="2" />
<text  x="949.76" y="207.5" ></text>
</g>
<g >
<title>main (36,802 samples, 99.57%)</title><rect x="12.6" y="597" width="1174.9" height="15.0" fill="rgb(249,124,26)" rx="2" ry="2" />
<text  x="15.62" y="607.5" >main</text>
</g>
<g >
<title>iovec_writev (17,687 samples, 47.85%)</title><rect x="618.3" y="421" width="564.7" height="15.0" fill="rgb(228,175,43)" rx="2" ry="2" />
<text  x="621.34" y="431.5" >iovec_writev</text>
</g>
<g >
<title>__alloc_pages_nodemask (3,467 samples, 9.38%)</title><rect x="794.0" y="213" width="110.7" height="15.0" fill="rgb(211,184,14)" rx="2" ry="2" />
<text  x="797.00" y="223.5" >__alloc_pages..</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__serve_222 (36,802 samples, 99.57%)</title><rect x="12.6" y="501" width="1174.9" height="15.0" fill="rgb(223,168,37)" rx="2" ry="2" />
<text  x="15.62" y="511.5" >camlDune__exe__Nullfs_test__serve_222</text>
</g>
<g >
<title>camlStyx__Iovec__memset_974 (5,328 samples, 14.42%)</title><rect x="49.9" y="421" width="170.1" height="15.0" fill="rgb(231,157,43)" rx="2" ry="2" />
<text  x="52.88" y="431.5" >camlStyx__Iovec__memse..</text>
</g>
<g >
<title>try_to_wake_up (468 samples, 1.27%)</title><rect x="344.4" y="85" width="15.0" height="15.0" fill="rgb(209,55,43)" rx="2" ry="2" />
<text  x="347.42" y="95.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (1,547 samples, 4.19%)</title><rect x="1048.2" y="117" width="49.4" height="15.0" fill="rgb(234,119,35)" rx="2" ry="2" />
<text  x="1051.22" y="127.5" >x86_..</text>
</g>
<g >
<title>__schedule (2,303 samples, 6.23%)</title><rect x="361.7" y="101" width="73.5" height="15.0" fill="rgb(215,208,4)" rx="2" ry="2" />
<text  x="364.69" y="111.5" >__schedule</text>
</g>
<g >
<title>dequeue_task_fair (323 samples, 0.87%)</title><rect x="497.9" y="197" width="10.3" height="15.0" fill="rgb(236,137,3)" rx="2" ry="2" />
<text  x="500.85" y="207.5" ></text>
</g>
<g >
<title>__wake_up_common (842 samples, 2.28%)</title><rect x="332.7" y="149" width="26.9" height="15.0" fill="rgb(240,28,17)" rx="2" ry="2" />
<text  x="335.74" y="159.5" >_..</text>
</g>
<g >
<title>unix_stream_read_actor (340 samples, 0.92%)</title><rect x="530.6" y="245" width="10.9" height="15.0" fill="rgb(216,142,13)" rx="2" ry="2" />
<text  x="533.61" y="255.5" ></text>
</g>
<g >
<title>do_iter_write (16,527 samples, 44.71%)</title><rect x="629.7" y="325" width="527.6" height="15.0" fill="rgb(213,113,12)" rx="2" ry="2" />
<text  x="632.67" y="335.5" >do_iter_write</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,419 samples, 3.84%)</title><rect x="565.8" y="389" width="45.3" height="15.0" fill="rgb(216,144,26)" rx="2" ry="2" />
<text  x="568.79" y="399.5" >entr..</text>
</g>
<g >
<title>__perf_event_task_sched_out (1,255 samples, 3.40%)</title><rect x="364.3" y="85" width="40.1" height="15.0" fill="rgb(224,178,24)" rx="2" ry="2" />
<text  x="367.31" y="95.5" >__p..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17,085 samples, 46.22%)</title><rect x="622.4" y="389" width="545.4" height="15.0" fill="rgb(222,104,40)" rx="2" ry="2" />
<text  x="625.40" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>sock_write_iter (16,354 samples, 44.25%)</title><rect x="634.1" y="293" width="522.1" height="15.0" fill="rgb(221,104,5)" rx="2" ry="2" />
<text  x="637.08" y="303.5" >sock_write_iter</text>
</g>
<g >
<title>iovec_memset (5,315 samples, 14.38%)</title><rect x="50.3" y="405" width="169.7" height="15.0" fill="rgb(253,111,45)" rx="2" ry="2" />
<text  x="53.29" y="415.5" >iovec_memset</text>
</g>
<g >
<title>caml_main (36,802 samples, 99.57%)</title><rect x="12.6" y="581" width="1174.9" height="15.0" fill="rgb(231,18,4)" rx="2" ry="2" />
<text  x="15.62" y="591.5" >caml_main</text>
</g>
<g >
<title>enqueue_task_fair (389 samples, 1.05%)</title><rect x="996.8" y="117" width="12.4" height="15.0" fill="rgb(216,31,40)" rx="2" ry="2" />
<text  x="999.79" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main (36,802 samples, 99.57%)</title><rect x="12.6" y="613" width="1174.9" height="15.0" fill="rgb(220,114,10)" rx="2" ry="2" />
<text  x="15.62" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>unix_write_space (3,318 samples, 8.98%)</title><rect x="329.4" y="181" width="105.9" height="15.0" fill="rgb(217,149,25)" rx="2" ry="2" />
<text  x="332.42" y="191.5" >unix_write_s..</text>
</g>
<g >
<title>alloc_skb_with_frags (5,518 samples, 14.93%)</title><rect x="791.8" y="229" width="176.1" height="15.0" fill="rgb(211,111,44)" rx="2" ry="2" />
<text  x="794.76" y="239.5" >alloc_skb_with_frags</text>
</g>
<g >
<title>queue_work_on (1,295 samples, 3.50%)</title><rect x="978.4" y="181" width="41.3" height="15.0" fill="rgb(251,23,5)" rx="2" ry="2" />
<text  x="981.37" y="191.5" >que..</text>
</g>
<g >
<title>do_iter_readv_writev (16,412 samples, 44.40%)</title><rect x="632.2" y="309" width="524.0" height="15.0" fill="rgb(213,145,16)" rx="2" ry="2" />
<text  x="635.23" y="319.5" >do_iter_readv_writev</text>
</g>
<g >
<title>ttwu_do_activate (610 samples, 1.65%)</title><rect x="989.7" y="133" width="19.5" height="15.0" fill="rgb(214,200,30)" rx="2" ry="2" />
<text  x="992.73" y="143.5" ></text>
</g>
<g >
<title>__wake_up_common (1,401 samples, 3.79%)</title><rect x="975.0" y="213" width="44.7" height="15.0" fill="rgb(251,170,16)" rx="2" ry="2" />
<text  x="977.98" y="223.5" >__wa..</text>
</g>
<g >
<title>do_writev (16,782 samples, 45.40%)</title><rect x="624.5" y="357" width="535.7" height="15.0" fill="rgb(206,228,25)" rx="2" ry="2" />
<text  x="627.47" y="367.5" >do_writev</text>
</g>
<g >
<title>native_read_msr (330 samples, 0.89%)</title><rect x="378.3" y="37" width="10.5" height="15.0" fill="rgb(236,28,15)" rx="2" ry="2" />
<text  x="381.29" y="47.5" ></text>
</g>
<g >
<title>caml_startup_common (36,802 samples, 99.57%)</title><rect x="12.6" y="565" width="1174.9" height="15.0" fill="rgb(226,152,4)" rx="2" ry="2" />
<text  x="15.62" y="575.5" >caml_startup_common</text>
</g>
<g >
<title>__GI___readv (8,524 samples, 23.06%)</title><rect x="279.2" y="405" width="272.1" height="15.0" fill="rgb(243,124,22)" rx="2" ry="2" />
<text  x="282.16" y="415.5" >__GI___readv</text>
</g>
<g >
<title>sock_alloc_send_pskb (5,678 samples, 15.36%)</title><rect x="788.2" y="245" width="181.2" height="15.0" fill="rgb(222,80,22)" rx="2" ry="2" />
<text  x="791.15" y="255.5" >sock_alloc_send_pskb</text>
</g>
<g >
<title>memset (315 samples, 0.85%)</title><rect x="916.4" y="181" width="10.0" height="15.0" fill="rgb(219,79,1)" rx="2" ry="2" />
<text  x="919.37" y="191.5" ></text>
</g>
<g >
<title>finish_task_switch (534 samples, 1.44%)</title><rect x="1099.7" y="149" width="17.0" height="15.0" fill="rgb(246,149,34)" rx="2" ry="2" />
<text  x="1102.65" y="159.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1,205 samples, 3.26%)</title><rect x="365.4" y="69" width="38.5" height="15.0" fill="rgb(218,130,24)" rx="2" ry="2" />
<text  x="368.40" y="79.5" >amd..</text>
</g>
<g >
<title>copyin (3,145 samples, 8.51%)</title><rect x="686.9" y="213" width="100.4" height="15.0" fill="rgb(208,16,17)" rx="2" ry="2" />
<text  x="689.92" y="223.5" >copyin</text>
</g>
<g >
<title>__kmalloc_node_track_caller (1,220 samples, 3.30%)</title><rect x="907.2" y="197" width="39.0" height="15.0" fill="rgb(210,166,20)" rx="2" ry="2" />
<text  x="910.24" y="207.5" >__k..</text>
</g>
<g >
<title>native_read_msr (527 samples, 1.43%)</title><rect x="1055.1" y="101" width="16.8" height="15.0" fill="rgb(207,41,16)" rx="2" ry="2" />
<text  x="1058.08" y="111.5" ></text>
</g>
<g >
<title>camlStyx__Proto__handle_wrap_1616 (443 samples, 1.20%)</title><rect x="18.7" y="453" width="14.1" height="15.0" fill="rgb(221,126,27)" rx="2" ry="2" />
<text  x="21.65" y="463.5" ></text>
</g>
<g >
<title>preempt_schedule (2,330 samples, 6.30%)</title><rect x="360.9" y="117" width="74.3" height="15.0" fill="rgb(221,144,19)" rx="2" ry="2" />
<text  x="363.86" y="127.5" >preempt_..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (4,208 samples, 11.38%)</title><rect x="1020.7" y="213" width="134.4" height="15.0" fill="rgb(251,167,50)" rx="2" ry="2" />
<text  x="1023.73" y="223.5" >_raw_spin_unlock..</text>
</g>
<g >
<title>obj_cgroup_charge (619 samples, 1.67%)</title><rect x="926.4" y="181" width="19.8" height="15.0" fill="rgb(238,52,33)" rx="2" ry="2" />
<text  x="929.42" y="191.5" ></text>
</g>
<g >
<title>ctx_sched_in (368 samples, 1.00%)</title><rect x="1102.0" y="117" width="11.8" height="15.0" fill="rgb(228,147,41)" rx="2" ry="2" />
<text  x="1105.01" y="127.5" ></text>
</g>
<g >
<title>__alloc_skb (1,891 samples, 5.12%)</title><rect x="904.7" y="213" width="60.4" height="15.0" fill="rgb(244,47,12)" rx="2" ry="2" />
<text  x="907.68" y="223.5" >__allo..</text>
</g>
<g >
<title>psi_task_change (343 samples, 0.93%)</title><rect x="486.9" y="181" width="11.0" height="15.0" fill="rgb(250,225,47)" rx="2" ry="2" />
<text  x="489.90" y="191.5" ></text>
</g>
<g >
<title>copy_user_generic_string (546 samples, 1.48%)</title><rect x="667.4" y="197" width="17.5" height="15.0" fill="rgb(237,222,23)" rx="2" ry="2" />
<text  x="670.44" y="207.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (2,231 samples, 6.04%)</title><rect x="1027.8" y="149" width="71.2" height="15.0" fill="rgb(207,134,7)" rx="2" ry="2" />
<text  x="1030.75" y="159.5" >__perf_e..</text>
</g>
<g >
<title>unix_stream_sendmsg (16,146 samples, 43.68%)</title><rect x="640.7" y="261" width="515.5" height="15.0" fill="rgb(253,177,38)" rx="2" ry="2" />
<text  x="643.72" y="271.5" >unix_stream_sendmsg</text>
</g>
<g >
<title>dequeue_task (360 samples, 0.97%)</title><rect x="486.4" y="197" width="11.5" height="15.0" fill="rgb(242,110,23)" rx="2" ry="2" />
<text  x="489.36" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8,443 samples, 22.84%)</title><rect x="280.8" y="389" width="269.5" height="15.0" fill="rgb(211,38,54)" rx="2" ry="2" />
<text  x="283.76" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>copyin (554 samples, 1.50%)</title><rect x="667.2" y="213" width="17.7" height="15.0" fill="rgb(231,228,22)" rx="2" ry="2" />
<text  x="670.19" y="223.5" ></text>
</g>
<g >
<title>unix_destruct_scm (3,555 samples, 9.62%)</title><rect x="321.8" y="213" width="113.5" height="15.0" fill="rgb(217,79,11)" rx="2" ry="2" />
<text  x="324.85" y="223.5" >unix_destruct_..</text>
</g>
<g >
<title>native_write_msr (805 samples, 2.18%)</title><rect x="1071.9" y="101" width="25.7" height="15.0" fill="rgb(245,77,37)" rx="2" ry="2" />
<text  x="1074.91" y="111.5" >n..</text>
</g>
<g >
<title>sock_sendmsg (16,280 samples, 44.05%)</title><rect x="636.4" y="277" width="519.8" height="15.0" fill="rgb(218,198,46)" rx="2" ry="2" />
<text  x="639.44" y="287.5" >sock_sendmsg</text>
</g>
<g >
<title>get_page_from_freelist (2,881 samples, 7.79%)</title><rect x="812.5" y="197" width="92.0" height="15.0" fill="rgb(213,153,12)" rx="2" ry="2" />
<text  x="815.51" y="207.5" >get_page_f..</text>
</g>
<g >
<title>unix_gettimeofday (1,548 samples, 4.19%)</title><rect x="562.5" y="421" width="49.4" height="15.0" fill="rgb(222,214,12)" rx="2" ry="2" />
<text  x="565.47" y="431.5" >unix..</text>
</g>
<g >
<title>pick_next_task_fair (348 samples, 0.94%)</title><rect x="412.4" y="85" width="11.1" height="15.0" fill="rgb(235,139,4)" rx="2" ry="2" />
<text  x="415.42" y="95.5" ></text>
</g>
<g >
<title>all (36,961 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(222,161,52)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>camlStyx__server_loop_2255 (36,802 samples, 99.57%)</title><rect x="12.6" y="469" width="1174.9" height="15.0" fill="rgb(228,146,21)" rx="2" ry="2" />
<text  x="15.62" y="479.5" >camlStyx__server_loop_2255</text>
</g>
<g >
<title>unix_stream_recvmsg (7,703 samples, 20.84%)</title><rect x="295.5" y="277" width="246.0" height="15.0" fill="rgb(243,95,14)" rx="2" ry="2" />
<text  x="298.54" y="287.5" >unix_stream_recvmsg</text>
</g>
<g >
<title>__skb_datagram_iter (327 samples, 0.88%)</title><rect x="531.0" y="213" width="10.5" height="15.0" fill="rgb(242,46,11)" rx="2" ry="2" />
<text  x="534.02" y="223.5" ></text>
</g>
<g >
<title>camlStyx__Proto__of_iovec_345 (340 samples, 0.92%)</title><rect x="21.9" y="437" width="10.9" height="15.0" fill="rgb(205,42,14)" rx="2" ry="2" />
<text  x="24.94" y="447.5" ></text>
</g>
<g >
<title>copy_user_generic_string (3,133 samples, 8.48%)</title><rect x="687.3" y="197" width="100.0" height="15.0" fill="rgb(209,181,11)" rx="2" ry="2" />
<text  x="690.30" y="207.5" >copy_user_ge..</text>
</g>
<g >
<title>__queue_work (531 samples, 1.44%)</title><rect x="342.4" y="101" width="17.0" height="15.0" fill="rgb(249,27,38)" rx="2" ry="2" />
<text  x="345.44" y="111.5" ></text>
</g>
<g >
<title>native_write_msr (490 samples, 1.33%)</title><rect x="470.1" y="149" width="15.6" height="15.0" fill="rgb(245,26,45)" rx="2" ry="2" />
<text  x="473.08" y="159.5" ></text>
</g>
<g >
<title>__queue_work (1,251 samples, 3.38%)</title><rect x="979.7" y="165" width="39.9" height="15.0" fill="rgb(244,76,30)" rx="2" ry="2" />
<text  x="982.67" y="175.5" >__q..</text>
</g>
<g >
<title>do_iter_read (7,984 samples, 21.60%)</title><rect x="288.3" y="325" width="254.9" height="15.0" fill="rgb(223,55,46)" rx="2" ry="2" />
<text  x="291.33" y="335.5" >do_iter_read</text>
</g>
<g >
<title>queue_work_on (643 samples, 1.74%)</title><rect x="339.1" y="117" width="20.5" height="15.0" fill="rgb(224,45,31)" rx="2" ry="2" />
<text  x="342.09" y="127.5" ></text>
</g>
<g >
<title>consume_skb (3,904 samples, 10.56%)</title><rect x="310.7" y="245" width="124.6" height="15.0" fill="rgb(232,71,54)" rx="2" ry="2" />
<text  x="313.71" y="255.5" >consume_skb</text>
</g>
<g >
<title>sock_wfree (3,519 samples, 9.52%)</title><rect x="323.0" y="197" width="112.3" height="15.0" fill="rgb(228,170,4)" rx="2" ry="2" />
<text  x="326.00" y="207.5" >sock_wfree</text>
</g>
<g >
<title>do_iter_readv_writev (7,858 samples, 21.26%)</title><rect x="290.6" y="309" width="250.9" height="15.0" fill="rgb(233,80,11)" rx="2" ry="2" />
<text  x="293.59" y="319.5" >do_iter_readv_writev</text>
</g>
<g >
<title>x86_pmu_disable_all (927 samples, 2.51%)</title><rect x="456.1" y="165" width="29.6" height="15.0" fill="rgb(254,165,44)" rx="2" ry="2" />
<text  x="459.13" y="175.5" >x8..</text>
</g>
<g >
<title>amd_pmu_disable_all (1,206 samples, 3.26%)</title><rect x="447.2" y="181" width="38.5" height="15.0" fill="rgb(224,117,50)" rx="2" ry="2" />
<text  x="450.22" y="191.5" >amd..</text>
</g>
<g >
<title>_copy_from_iter (587 samples, 1.59%)</title><rect x="666.1" y="229" width="18.8" height="15.0" fill="rgb(208,70,36)" rx="2" ry="2" />
<text  x="669.13" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch (347 samples, 0.94%)</title><rect x="508.2" y="197" width="11.0" height="15.0" fill="rgb(251,167,25)" rx="2" ry="2" />
<text  x="511.17" y="207.5" ></text>
</g>
<g >
<title>preempt_schedule_thunk (4,142 samples, 11.21%)</title><rect x="1022.8" y="197" width="132.3" height="15.0" fill="rgb(247,200,15)" rx="2" ry="2" />
<text  x="1025.84" y="207.5" >preempt_schedule..</text>
</g>
<g >
<title>sock_def_readable (5,815 samples, 15.73%)</title><rect x="969.4" y="245" width="185.7" height="15.0" fill="rgb(253,148,47)" rx="2" ry="2" />
<text  x="972.43" y="255.5" >sock_def_readable</text>
</g>
<g >
<title>ktime_get_real_ts64 (1,191 samples, 3.22%)</title><rect x="570.5" y="341" width="38.0" height="15.0" fill="rgb(215,42,20)" rx="2" ry="2" />
<text  x="573.52" y="351.5" >kti..</text>
</g>
<g >
<title>clear_page_rep (2,072 samples, 5.61%)</title><rect x="837.1" y="149" width="66.1" height="15.0" fill="rgb(247,164,48)" rx="2" ry="2" />
<text  x="840.06" y="159.5" >clear_p..</text>
</g>
<g >
<title>p9_pollwake (751 samples, 2.03%)</title><rect x="335.6" y="133" width="24.0" height="15.0" fill="rgb(232,68,11)" rx="2" ry="2" />
<text  x="338.64" y="143.5" >p..</text>
</g>
<g >
<title>do_readv (8,247 samples, 22.31%)</title><rect x="282.9" y="357" width="263.3" height="15.0" fill="rgb(208,162,52)" rx="2" ry="2" />
<text  x="285.90" y="367.5" >do_readv</text>
</g>
<g >
<title>__vdso_gettimeofday (1,499 samples, 4.06%)</title><rect x="563.6" y="405" width="47.9" height="15.0" fill="rgb(224,23,34)" rx="2" ry="2" />
<text  x="566.62" y="415.5" >__vd..</text>
</g>
<g >
<title>skb_copy_datagram_from_iter (4,039 samples, 10.93%)</title><rect x="658.4" y="245" width="128.9" height="15.0" fill="rgb(212,182,12)" rx="2" ry="2" />
<text  x="661.38" y="255.5" >skb_copy_datagra..</text>
</g>
<g >
<title>try_to_wake_up (1,078 samples, 2.92%)</title><rect x="985.2" y="149" width="34.4" height="15.0" fill="rgb(219,197,24)" rx="2" ry="2" />
<text  x="988.20" y="159.5" >tr..</text>
</g>
<g >
<title>__writev (17,213 samples, 46.57%)</title><rect x="620.3" y="405" width="549.6" height="15.0" fill="rgb(213,21,34)" rx="2" ry="2" />
<text  x="623.32" y="415.5" >__writev</text>
</g>
<g >
<title>_start (36,802 samples, 99.57%)</title><rect x="12.6" y="629" width="1174.9" height="15.0" fill="rgb(211,173,32)" rx="2" ry="2" />
<text  x="15.62" y="639.5" >_start</text>
</g>
<g >
<title>caml_start_program (36,802 samples, 99.57%)</title><rect x="12.6" y="549" width="1174.9" height="15.0" fill="rgb(209,172,6)" rx="2" ry="2" />
<text  x="15.62" y="559.5" >caml_start_program</text>
</g>
<g >
<title>iovec_readv (8,958 samples, 24.24%)</title><rect x="276.5" y="421" width="286.0" height="15.0" fill="rgb(236,148,40)" rx="2" ry="2" />
<text  x="279.48" y="431.5" >iovec_readv</text>
</g>
<g >
<title>schedule (2,727 samples, 7.38%)</title><rect x="442.4" y="229" width="87.1" height="15.0" fill="rgb(225,31,15)" rx="2" ry="2" />
<text  x="445.43" y="239.5" >schedule</text>
</g>
<g >
<title>sock_read_iter (7,783 samples, 21.06%)</title><rect x="293.0" y="293" width="248.5" height="15.0" fill="rgb(209,91,13)" rx="2" ry="2" />
<text  x="295.99" y="303.5" >sock_read_iter</text>
</g>
<g >
<title>__x64_sys_gettimeofday (1,283 samples, 3.47%)</title><rect x="567.6" y="357" width="40.9" height="15.0" fill="rgb(226,18,24)" rx="2" ry="2" />
<text  x="570.58" y="367.5" >__x..</text>
</g>
<g >
<title>skb_release_head_state (3,579 samples, 9.68%)</title><rect x="321.1" y="229" width="114.2" height="15.0" fill="rgb(237,37,18)" rx="2" ry="2" />
<text  x="324.08" y="239.5" >skb_release_he..</text>
</g>
<g >
<title>read_hpet (1,164 samples, 3.15%)</title><rect x="571.4" y="325" width="37.1" height="15.0" fill="rgb(250,196,4)" rx="2" ry="2" />
<text  x="574.38" y="335.5" >rea..</text>
</g>
<g >
<title>camlStyx__flush_buffer_1542 (17,889 samples, 48.40%)</title><rect x="611.9" y="437" width="571.1" height="15.0" fill="rgb(240,197,7)" rx="2" ry="2" />
<text  x="614.89" y="447.5" >camlStyx__flush_buffer_1542</text>
</g>
<g >
<title>kernel_init_free_pages (2,260 samples, 6.11%)</title><rect x="831.1" y="165" width="72.1" height="15.0" fill="rgb(247,118,14)" rx="2" ry="2" />
<text  x="834.06" y="175.5" >kernel_i..</text>
</g>
<g >
<title>schedule_timeout (2,752 samples, 7.45%)</title><rect x="441.6" y="245" width="87.9" height="15.0" fill="rgb(223,88,39)" rx="2" ry="2" />
<text  x="444.63" y="255.5" >schedule_t..</text>
</g>
<g >
<title>nullfs_test.exe (36,961 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(206,121,44)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >nullfs_test.exe</text>
</g>
<g >
<title>do_syscall_64 (1,348 samples, 3.65%)</title><rect x="566.8" y="373" width="43.1" height="15.0" fill="rgb(248,201,8)" rx="2" ry="2" />
<text  x="569.85" y="383.5" >do_s..</text>
</g>
<g >
<title>camlNullfs__read_444 (5,369 samples, 14.53%)</title><rect x="48.6" y="437" width="171.4" height="15.0" fill="rgb(223,212,53)" rx="2" ry="2" />
<text  x="51.63" y="447.5" >camlNullfs__read_444</text>
</g>
<g >
<title>__memcg_kmem_charge_page (495 samples, 1.34%)</title><rect x="796.7" y="197" width="15.8" height="15.0" fill="rgb(245,184,26)" rx="2" ry="2" />
<text  x="799.71" y="207.5" ></text>
</g>
<g >
<title>copy_page_from_iter (3,209 samples, 8.68%)</title><rect x="684.9" y="229" width="102.4" height="15.0" fill="rgb(226,80,2)" rx="2" ry="2" />
<text  x="687.87" y="239.5" >copy_page_fr..</text>
</g>
<g >
<title>skb_copy_datagram_iter (331 samples, 0.90%)</title><rect x="530.9" y="229" width="10.6" height="15.0" fill="rgb(251,228,15)" rx="2" ry="2" />
<text  x="533.90" y="239.5" ></text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (506 samples, 1.37%)</title><rect x="1032.1" y="117" width="16.1" height="15.0" fill="rgb(217,185,25)" rx="2" ry="2" />
<text  x="1035.06" y="127.5" ></text>
</g>
<g >
<title>__schedule (2,702 samples, 7.31%)</title><rect x="443.2" y="213" width="86.3" height="15.0" fill="rgb(244,70,6)" rx="2" ry="2" />
<text  x="446.23" y="223.5" >__schedule</text>
</g>
<g >
<title>camlStyx__fill_buffer_1555 (10,825 samples, 29.29%)</title><rect x="266.3" y="437" width="345.6" height="15.0" fill="rgb(207,203,36)" rx="2" ry="2" />
<text  x="269.30" y="447.5" >camlStyx__fill_buffer_1555</text>
</g>
<g >
<title>vfs_writev (16,672 samples, 45.11%)</title><rect x="628.0" y="341" width="532.2" height="15.0" fill="rgb(219,98,39)" rx="2" ry="2" />
<text  x="630.98" y="351.5" >vfs_writev</text>
</g>
<g >
<title>preempt_schedule (4,139 samples, 11.20%)</title><rect x="1022.9" y="181" width="132.2" height="15.0" fill="rgb(245,172,8)" rx="2" ry="2" />
<text  x="1025.93" y="191.5" >preempt_schedule</text>
</g>
<g >
<title>__perf_event_task_sched_out (1,284 samples, 3.47%)</title><rect x="445.3" y="197" width="41.0" height="15.0" fill="rgb(210,94,10)" rx="2" ry="2" />
<text  x="448.30" y="207.5" >__p..</text>
</g>
<g >
<title>camlStdlib__fun__protect_139 (36,802 samples, 99.57%)</title><rect x="12.6" y="485" width="1174.9" height="15.0" fill="rgb(218,44,25)" rx="2" ry="2" />
<text  x="15.62" y="495.5" >camlStdlib__fun__protect_139</text>
</g>
</g>
</svg>
