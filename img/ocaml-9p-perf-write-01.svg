<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1000" height="710" onload="init(evt)" viewBox="0 0 1000 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1000.0" height="710.0" fill="url(#background)"  />
<text id="title" x="500.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="890.00" y="24" >Search</text>
<text id="ignorecase" x="974.00" y="24" >ic</text>
<text id="matched" x="890.00" y="693" > </text>
<g id="frames">
<g >
<title>do_iter_readv_writev (8,654 samples, 23.01%)</title><rect x="722.3" y="309" width="225.5" height="15.0" fill="rgb(245,36,17)" rx="2" ry="2" />
<text  x="725.31" y="319.5" >do_iter_readv_writev</text>
</g>
<g >
<title>do_syscall_64 (16,618 samples, 44.18%)</title><rect x="155.0" y="373" width="433.0" height="15.0" fill="rgb(235,60,22)" rx="2" ry="2" />
<text  x="158.04" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>__schedule (4,266 samples, 11.34%)</title><rect x="835.5" y="165" width="111.1" height="15.0" fill="rgb(225,154,22)" rx="2" ry="2" />
<text  x="838.46" y="175.5" >__schedule</text>
</g>
<g >
<title>_copy_to_iter (872 samples, 2.32%)</title><rect x="548.5" y="197" width="22.7" height="15.0" fill="rgb(235,34,4)" rx="2" ry="2" />
<text  x="551.51" y="207.5" >_..</text>
</g>
<g >
<title>unix_stream_read_generic (15,426 samples, 41.01%)</title><rect x="177.4" y="261" width="401.9" height="15.0" fill="rgb(211,75,29)" rx="2" ry="2" />
<text  x="180.44" y="271.5" >unix_stream_read_generic</text>
</g>
<g >
<title>nullfs_test.exe (37,616 samples, 100.00%)</title><rect x="10.0" y="645" width="980.0" height="15.0" fill="rgb(245,107,38)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >nullfs_test.exe</text>
</g>
<g >
<title>dequeue_task (768 samples, 2.04%)</title><rect x="475.0" y="197" width="20.0" height="15.0" fill="rgb(245,82,4)" rx="2" ry="2" />
<text  x="477.96" y="207.5" ></text>
</g>
<g >
<title>preempt_schedule (4,211 samples, 11.19%)</title><rect x="275.4" y="117" width="109.7" height="15.0" fill="rgb(219,164,53)" rx="2" ry="2" />
<text  x="278.40" y="127.5" >preempt_sched..</text>
</g>
<g >
<title>__queue_work (1,200 samples, 3.19%)</title><rect x="800.3" y="165" width="31.3" height="15.0" fill="rgb(252,220,53)" rx="2" ry="2" />
<text  x="803.31" y="175.5" >__..</text>
</g>
<g >
<title>dequeue_task_fair (676 samples, 1.80%)</title><rect x="495.0" y="197" width="17.6" height="15.0" fill="rgb(236,103,41)" rx="2" ry="2" />
<text  x="497.97" y="207.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (5,942 samples, 15.80%)</title><rect x="230.3" y="165" width="154.8" height="15.0" fill="rgb(229,89,5)" rx="2" ry="2" />
<text  x="233.33" y="175.5" >__wake_up_common_lock</text>
</g>
<g >
<title>__schedule (4,175 samples, 11.10%)</title><rect x="276.3" y="101" width="108.8" height="15.0" fill="rgb(212,172,17)" rx="2" ry="2" />
<text  x="279.34" y="111.5" >__schedule</text>
</g>
<g >
<title>__perf_event_task_sched_in (409 samples, 1.09%)</title><rect x="339.6" y="69" width="10.7" height="15.0" fill="rgb(245,40,20)" rx="2" ry="2" />
<text  x="342.65" y="79.5" ></text>
</g>
<g >
<title>unix_write_space (6,037 samples, 16.05%)</title><rect x="227.9" y="181" width="157.3" height="15.0" fill="rgb(251,5,22)" rx="2" ry="2" />
<text  x="230.88" y="191.5" >unix_write_space</text>
</g>
<g >
<title>__alloc_skb (1,100 samples, 2.92%)</title><rect x="760.7" y="213" width="28.6" height="15.0" fill="rgb(223,169,47)" rx="2" ry="2" />
<text  x="763.66" y="223.5" >__..</text>
</g>
<g >
<title>native_read_msr (529 samples, 1.41%)</title><rect x="860.9" y="101" width="13.8" height="15.0" fill="rgb(206,111,6)" rx="2" ry="2" />
<text  x="863.93" y="111.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (1,628 samples, 4.33%)</title><rect x="295.5" y="53" width="42.5" height="15.0" fill="rgb(216,62,2)" rx="2" ry="2" />
<text  x="298.54" y="63.5" >x86..</text>
</g>
<g >
<title>sock_alloc_send_pskb (1,343 samples, 3.57%)</title><rect x="755.5" y="245" width="35.0" height="15.0" fill="rgb(218,198,52)" rx="2" ry="2" />
<text  x="758.47" y="255.5" >so..</text>
</g>
<g >
<title>p9_pollwake (1,381 samples, 3.67%)</title><rect x="237.0" y="133" width="36.0" height="15.0" fill="rgb(217,189,6)" rx="2" ry="2" />
<text  x="240.05" y="143.5" >p9_..</text>
</g>
<g >
<title>caml_startup_common (37,318 samples, 99.21%)</title><rect x="13.9" y="565" width="972.2" height="15.0" fill="rgb(221,46,46)" rx="2" ry="2" />
<text  x="16.88" y="575.5" >caml_startup_common</text>
</g>
<g >
<title>unix_stream_sendmsg (8,262 samples, 21.96%)</title><rect x="732.5" y="261" width="215.3" height="15.0" fill="rgb(231,35,25)" rx="2" ry="2" />
<text  x="735.52" y="271.5" >unix_stream_sendmsg</text>
</g>
<g >
<title>try_to_wake_up (1,056 samples, 2.81%)</title><rect x="804.0" y="149" width="27.5" height="15.0" fill="rgb(235,53,40)" rx="2" ry="2" />
<text  x="807.04" y="159.5" >t..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (4,384 samples, 11.65%)</title><rect x="832.4" y="213" width="114.2" height="15.0" fill="rgb(225,136,7)" rx="2" ry="2" />
<text  x="835.38" y="223.5" >_raw_spin_unlo..</text>
</g>
<g >
<title>caml_program (37,318 samples, 99.21%)</title><rect x="13.9" y="533" width="972.2" height="15.0" fill="rgb(225,15,3)" rx="2" ry="2" />
<text  x="16.88" y="543.5" >caml_program</text>
</g>
<g >
<title>native_write_msr (1,059 samples, 2.82%)</title><rect x="446.0" y="149" width="27.6" height="15.0" fill="rgb(246,37,6)" rx="2" ry="2" />
<text  x="448.97" y="159.5" >n..</text>
</g>
<g >
<title>event_sched_in (396 samples, 1.05%)</title><rect x="517.4" y="117" width="10.3" height="15.0" fill="rgb(233,222,52)" rx="2" ry="2" />
<text  x="520.40" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_gettimeofday (2,780 samples, 7.39%)</title><rect x="616.6" y="357" width="72.4" height="15.0" fill="rgb(211,99,20)" rx="2" ry="2" />
<text  x="619.59" y="367.5" >__x64_sy..</text>
</g>
<g >
<title>schedule_timeout (5,746 samples, 15.28%)</title><rect x="395.6" y="245" width="149.7" height="15.0" fill="rgb(240,52,34)" rx="2" ry="2" />
<text  x="398.55" y="255.5" >schedule_timeout</text>
</g>
<g >
<title>merge_sched_in (452 samples, 1.20%)</title><rect x="516.7" y="133" width="11.7" height="15.0" fill="rgb(232,65,9)" rx="2" ry="2" />
<text  x="519.67" y="143.5" ></text>
</g>
<g >
<title>__queue_work (1,200 samples, 3.19%)</title><rect x="241.6" y="101" width="31.2" height="15.0" fill="rgb(246,185,42)" rx="2" ry="2" />
<text  x="244.58" y="111.5" >__..</text>
</g>
<g >
<title>camlStyx__Message__fun_581 (397 samples, 1.06%)</title><rect x="37.6" y="421" width="10.3" height="15.0" fill="rgb(252,187,42)" rx="2" ry="2" />
<text  x="40.59" y="431.5" ></text>
</g>
<g >
<title>finish_task_switch (787 samples, 2.09%)</title><rect x="512.6" y="197" width="20.5" height="15.0" fill="rgb(220,156,53)" rx="2" ry="2" />
<text  x="515.58" y="207.5" ></text>
</g>
<g >
<title>psi_task_change (732 samples, 1.95%)</title><rect x="475.9" y="181" width="19.1" height="15.0" fill="rgb(247,13,16)" rx="2" ry="2" />
<text  x="478.90" y="191.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (441 samples, 1.17%)</title><rect x="762.2" y="197" width="11.5" height="15.0" fill="rgb(236,78,4)" rx="2" ry="2" />
<text  x="765.25" y="207.5" ></text>
</g>
<g >
<title>do_writev (9,314 samples, 24.76%)</title><rect x="712.8" y="357" width="242.7" height="15.0" fill="rgb(218,81,27)" rx="2" ry="2" />
<text  x="715.82" y="367.5" >do_writev</text>
</g>
<g >
<title>psi_group_change (442 samples, 1.18%)</title><rect x="933.8" y="133" width="11.5" height="15.0" fill="rgb(239,107,24)" rx="2" ry="2" />
<text  x="936.78" y="143.5" ></text>
</g>
<g >
<title>ktime_get_real_ts64 (2,606 samples, 6.93%)</title><rect x="621.1" y="341" width="67.9" height="15.0" fill="rgb(231,73,45)" rx="2" ry="2" />
<text  x="624.12" y="351.5" >ktime_g..</text>
</g>
<g >
<title>vfs_writev (9,139 samples, 24.30%)</title><rect x="717.4" y="341" width="238.1" height="15.0" fill="rgb(234,212,7)" rx="2" ry="2" />
<text  x="720.38" y="351.5" >vfs_writev</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,926 samples, 45.00%)</title><rect x="154.0" y="389" width="440.9" height="15.0" fill="rgb(206,215,38)" rx="2" ry="2" />
<text  x="156.97" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>x86_pmu_disable_all (1,611 samples, 4.28%)</title><rect x="855.0" y="117" width="42.0" height="15.0" fill="rgb(226,218,40)" rx="2" ry="2" />
<text  x="858.02" y="127.5" >x86..</text>
</g>
<g >
<title>__perf_event_task_sched_out (2,289 samples, 6.09%)</title><rect x="838.6" y="149" width="59.6" height="15.0" fill="rgb(239,167,48)" rx="2" ry="2" />
<text  x="841.56" y="159.5" >__perf..</text>
</g>
<g >
<title>__wake_up_common (1,566 samples, 4.16%)</title><rect x="232.2" y="149" width="40.8" height="15.0" fill="rgb(214,214,13)" rx="2" ry="2" />
<text  x="235.23" y="159.5" >__w..</text>
</g>
<g >
<title>caml_main (37,318 samples, 99.21%)</title><rect x="13.9" y="581" width="972.2" height="15.0" fill="rgb(226,205,41)" rx="2" ry="2" />
<text  x="16.88" y="591.5" >caml_main</text>
</g>
<g >
<title>do_iter_read (16,064 samples, 42.71%)</title><rect x="163.7" y="325" width="418.5" height="15.0" fill="rgb(205,114,49)" rx="2" ry="2" />
<text  x="166.66" y="335.5" >do_iter_read</text>
</g>
<g >
<title>camlStyx__Proto__commit_1363 (618 samples, 1.64%)</title><rect x="114.8" y="437" width="16.1" height="15.0" fill="rgb(238,197,36)" rx="2" ry="2" />
<text  x="117.76" y="447.5" ></text>
</g>
<g >
<title>pick_next_task_fair (689 samples, 1.83%)</title><rect x="351.5" y="85" width="18.0" height="15.0" fill="rgb(244,36,9)" rx="2" ry="2" />
<text  x="354.53" y="95.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (715 samples, 1.90%)</title><rect x="513.1" y="181" width="18.6" height="15.0" fill="rgb(231,184,0)" rx="2" ry="2" />
<text  x="516.10" y="191.5" ></text>
</g>
<g >
<title>camlStyx__server_loop_2255 (37,318 samples, 99.21%)</title><rect x="13.9" y="469" width="972.2" height="15.0" fill="rgb(213,50,16)" rx="2" ry="2" />
<text  x="16.88" y="479.5" >camlStyx__server_loop_2255</text>
</g>
<g >
<title>skb_copy_datagram_iter (1,210 samples, 3.22%)</title><rect x="547.8" y="229" width="31.5" height="15.0" fill="rgb(253,229,24)" rx="2" ry="2" />
<text  x="550.81" y="239.5" >sk..</text>
</g>
<g >
<title>ctx_sched_in (411 samples, 1.09%)</title><rect x="900.4" y="117" width="10.7" height="15.0" fill="rgb(211,203,47)" rx="2" ry="2" />
<text  x="903.38" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock (455 samples, 1.21%)</title><rect x="186.5" y="245" width="11.8" height="15.0" fill="rgb(235,187,22)" rx="2" ry="2" />
<text  x="189.48" y="255.5" ></text>
</g>
<g >
<title>caml_start_program (37,318 samples, 99.21%)</title><rect x="13.9" y="549" width="972.2" height="15.0" fill="rgb(245,203,54)" rx="2" ry="2" />
<text  x="16.88" y="559.5" >caml_start_program</text>
</g>
<g >
<title>pick_next_task_fair (661 samples, 1.76%)</title><rect x="912.7" y="149" width="17.2" height="15.0" fill="rgb(229,164,44)" rx="2" ry="2" />
<text  x="915.70" y="159.5" ></text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__serve_222 (37,318 samples, 99.21%)</title><rect x="13.9" y="501" width="972.2" height="15.0" fill="rgb(217,3,32)" rx="2" ry="2" />
<text  x="16.88" y="511.5" >camlDune__exe__Nullfs_test__serve_222</text>
</g>
<g >
<title>__vdso_gettimeofday (3,098 samples, 8.24%)</title><rect x="613.0" y="405" width="80.8" height="15.0" fill="rgb(215,196,31)" rx="2" ry="2" />
<text  x="616.04" y="415.5" >__vdso_ge..</text>
</g>
<g >
<title>unix_destruct_scm (6,486 samples, 17.24%)</title><rect x="216.2" y="213" width="169.0" height="15.0" fill="rgb(210,160,29)" rx="2" ry="2" />
<text  x="219.18" y="223.5" >unix_destruct_scm</text>
</g>
<g >
<title>__perf_event_task_sched_out (2,748 samples, 7.31%)</title><rect x="402.8" y="197" width="71.6" height="15.0" fill="rgb(233,171,3)" rx="2" ry="2" />
<text  x="405.80" y="207.5" >__perf_e..</text>
</g>
<g >
<title>queue_work_on (1,267 samples, 3.37%)</title><rect x="240.0" y="117" width="33.0" height="15.0" fill="rgb(230,138,8)" rx="2" ry="2" />
<text  x="243.02" y="127.5" >qu..</text>
</g>
<g >
<title>camlStyx__Message__fun_573 (796 samples, 2.12%)</title><rect x="87.2" y="437" width="20.8" height="15.0" fill="rgb(242,135,11)" rx="2" ry="2" />
<text  x="90.22" y="447.5" ></text>
</g>
<g >
<title>psi_group_change (405 samples, 1.08%)</title><rect x="372.5" y="69" width="10.6" height="15.0" fill="rgb(253,179,38)" rx="2" ry="2" />
<text  x="375.52" y="79.5" ></text>
</g>
<g >
<title>sock_wfree (6,409 samples, 17.04%)</title><rect x="218.2" y="197" width="167.0" height="15.0" fill="rgb(238,35,20)" rx="2" ry="2" />
<text  x="221.19" y="207.5" >sock_wfree</text>
</g>
<g >
<title>put_prev_entity (432 samples, 1.15%)</title><rect x="355.3" y="69" width="11.3" height="15.0" fill="rgb(206,143,0)" rx="2" ry="2" />
<text  x="358.30" y="79.5" ></text>
</g>
<g >
<title>schedule (5,666 samples, 15.06%)</title><rect x="397.6" y="229" width="147.7" height="15.0" fill="rgb(230,174,25)" rx="2" ry="2" />
<text  x="400.64" y="239.5" >schedule</text>
</g>
<g >
<title>do_iter_readv_writev (15,828 samples, 42.08%)</title><rect x="167.0" y="309" width="412.3" height="15.0" fill="rgb(225,114,33)" rx="2" ry="2" />
<text  x="169.97" y="319.5" >do_iter_readv_writev</text>
</g>
<g >
<title>do_syscall_64 (9,435 samples, 25.08%)</title><rect x="711.5" y="373" width="245.9" height="15.0" fill="rgb(223,150,3)" rx="2" ry="2" />
<text  x="714.55" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>__perf_event_task_sched_in (475 samples, 1.26%)</title><rect x="899.3" y="133" width="12.4" height="15.0" fill="rgb(229,204,35)" rx="2" ry="2" />
<text  x="902.34" y="143.5" ></text>
</g>
<g >
<title>sock_sendmsg (8,367 samples, 22.24%)</title><rect x="729.8" y="277" width="218.0" height="15.0" fill="rgb(210,49,24)" rx="2" ry="2" />
<text  x="732.79" y="287.5" >sock_sendmsg</text>
</g>
<g >
<title>put_prev_entity (426 samples, 1.13%)</title><rect x="916.0" y="133" width="11.1" height="15.0" fill="rgb(250,164,28)" rx="2" ry="2" />
<text  x="919.04" y="143.5" ></text>
</g>
<g >
<title>psi_task_switch (522 samples, 1.39%)</title><rect x="369.5" y="85" width="13.6" height="15.0" fill="rgb(246,195,10)" rx="2" ry="2" />
<text  x="372.48" y="95.5" ></text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (494 samples, 1.31%)</title><rect x="282.7" y="53" width="12.8" height="15.0" fill="rgb(247,13,17)" rx="2" ry="2" />
<text  x="285.67" y="63.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (1,202 samples, 3.20%)</title><rect x="548.0" y="213" width="31.3" height="15.0" fill="rgb(239,5,20)" rx="2" ry="2" />
<text  x="551.02" y="223.5" >__..</text>
</g>
<g >
<title>sched_clock_cpu (427 samples, 1.14%)</title><rect x="483.8" y="133" width="11.2" height="15.0" fill="rgb(236,6,54)" rx="2" ry="2" />
<text  x="486.85" y="143.5" ></text>
</g>
<g >
<title>vfs_readv (16,317 samples, 43.38%)</title><rect x="162.1" y="341" width="425.1" height="15.0" fill="rgb(245,43,29)" rx="2" ry="2" />
<text  x="165.12" y="351.5" >vfs_readv</text>
</g>
<g >
<title>native_read_msr (556 samples, 1.48%)</title><rect x="301.0" y="37" width="14.5" height="15.0" fill="rgb(215,165,54)" rx="2" ry="2" />
<text  x="303.98" y="47.5" ></text>
</g>
<g >
<title>iovec_writev (10,646 samples, 28.30%)</title><rect x="705.3" y="421" width="277.4" height="15.0" fill="rgb(215,30,9)" rx="2" ry="2" />
<text  x="708.35" y="431.5" >iovec_writev</text>
</g>
<g >
<title>native_read_msr (708 samples, 1.88%)</title><rect x="427.5" y="149" width="18.5" height="15.0" fill="rgb(222,48,21)" rx="2" ry="2" />
<text  x="430.52" y="159.5" ></text>
</g>
<g >
<title>try_to_wake_up (1,037 samples, 2.76%)</title><rect x="245.8" y="85" width="27.0" height="15.0" fill="rgb(253,87,41)" rx="2" ry="2" />
<text  x="248.78" y="95.5" >t..</text>
</g>
<g >
<title>x86_pmu_disable_all (2,027 samples, 5.39%)</title><rect x="420.7" y="165" width="52.9" height="15.0" fill="rgb(216,144,25)" rx="2" ry="2" />
<text  x="423.75" y="175.5" >x86_p..</text>
</g>
<g >
<title>camlStyx__Proto__handle_wrap_1616 (970 samples, 2.58%)</title><rect x="22.9" y="453" width="25.2" height="15.0" fill="rgb(254,58,47)" rx="2" ry="2" />
<text  x="25.87" y="463.5" >c..</text>
</g>
<g >
<title>ttwu_do_activate (562 samples, 1.49%)</title><rect x="249.6" y="69" width="14.6" height="15.0" fill="rgb(237,6,29)" rx="2" ry="2" />
<text  x="252.58" y="79.5" ></text>
</g>
<g >
<title>camlStyx__fill_buffer_1555 (21,612 samples, 57.45%)</title><rect x="131.7" y="437" width="563.1" height="15.0" fill="rgb(250,113,27)" rx="2" ry="2" />
<text  x="134.72" y="447.5" >camlStyx__fill_buffer_1555</text>
</g>
<g >
<title>ttwu_do_activate (616 samples, 1.64%)</title><rect x="808.0" y="133" width="16.1" height="15.0" fill="rgb(210,107,11)" rx="2" ry="2" />
<text  x="811.02" y="143.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (1,112 samples, 2.96%)</title><rect x="760.3" y="229" width="29.0" height="15.0" fill="rgb(242,1,26)" rx="2" ry="2" />
<text  x="763.35" y="239.5" >al..</text>
</g>
<g >
<title>unix_stream_read_actor (1,237 samples, 3.29%)</title><rect x="547.1" y="245" width="32.2" height="15.0" fill="rgb(222,183,18)" rx="2" ry="2" />
<text  x="550.10" y="255.5" >un..</text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (560 samples, 1.49%)</title><rect x="406.2" y="165" width="14.5" height="15.0" fill="rgb(209,213,13)" rx="2" ry="2" />
<text  x="409.16" y="175.5" ></text>
</g>
<g >
<title>visit_groups_merge.constprop.0.isra.0 (562 samples, 1.49%)</title><rect x="516.4" y="149" width="14.6" height="15.0" fill="rgb(210,69,0)" rx="2" ry="2" />
<text  x="519.36" y="159.5" ></text>
</g>
<g >
<title>camlStyx__f_2232 (35,581 samples, 94.59%)</title><rect x="57.3" y="453" width="926.9" height="15.0" fill="rgb(222,147,16)" rx="2" ry="2" />
<text  x="60.26" y="463.5" >camlStyx__f_2232</text>
</g>
<g >
<title>do_iter_write (8,819 samples, 23.44%)</title><rect x="719.2" y="325" width="229.8" height="15.0" fill="rgb(221,169,50)" rx="2" ry="2" />
<text  x="722.21" y="335.5" >do_iter_write</text>
</g>
<g >
<title>__libc_start_main (37,318 samples, 99.21%)</title><rect x="13.9" y="613" width="972.2" height="15.0" fill="rgb(215,74,51)" rx="2" ry="2" />
<text  x="16.88" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>queue_work_on (1,257 samples, 3.34%)</title><rect x="798.9" y="181" width="32.8" height="15.0" fill="rgb(236,71,4)" rx="2" ry="2" />
<text  x="801.90" y="191.5" >qu..</text>
</g>
<g >
<title>copyout (817 samples, 2.17%)</title><rect x="549.9" y="181" width="21.3" height="15.0" fill="rgb(209,217,31)" rx="2" ry="2" />
<text  x="552.94" y="191.5" >c..</text>
</g>
<g >
<title>preempt_schedule_thunk (4,218 samples, 11.21%)</title><rect x="275.2" y="133" width="109.9" height="15.0" fill="rgb(214,131,45)" rx="2" ry="2" />
<text  x="278.22" y="143.5" >preempt_sched..</text>
</g>
<g >
<title>finish_task_switch (469 samples, 1.25%)</title><rect x="339.3" y="85" width="12.2" height="15.0" fill="rgb(215,28,40)" rx="2" ry="2" />
<text  x="342.31" y="95.5" ></text>
</g>
<g >
<title>dequeue_entity (591 samples, 1.57%)</title><rect x="497.0" y="181" width="15.4" height="15.0" fill="rgb(245,175,1)" rx="2" ry="2" />
<text  x="499.98" y="191.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (5,884 samples, 15.64%)</title><rect x="793.3" y="229" width="153.3" height="15.0" fill="rgb(239,24,34)" rx="2" ry="2" />
<text  x="796.30" y="239.5" >__wake_up_common_lock</text>
</g>
<g >
<title>amd_pmu_disable_all (2,621 samples, 6.97%)</title><rect x="405.3" y="181" width="68.3" height="15.0" fill="rgb(235,28,25)" rx="2" ry="2" />
<text  x="408.27" y="191.5" >amd_pmu..</text>
</g>
<g >
<title>camlStdlib__fun__protect_139 (37,318 samples, 99.21%)</title><rect x="13.9" y="485" width="972.2" height="15.0" fill="rgb(223,209,53)" rx="2" ry="2" />
<text  x="16.88" y="495.5" >camlStdlib__fun__protect_139</text>
</g>
<g >
<title>preempt_schedule (4,313 samples, 11.47%)</title><rect x="834.2" y="181" width="112.4" height="15.0" fill="rgb(224,30,26)" rx="2" ry="2" />
<text  x="837.23" y="191.5" >preempt_sched..</text>
</g>
<g >
<title>read_hpet (2,580 samples, 6.86%)</title><rect x="621.8" y="325" width="67.2" height="15.0" fill="rgb(232,14,32)" rx="2" ry="2" />
<text  x="624.80" y="335.5" >read_hpet</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9,709 samples, 25.81%)</title><rect x="710.3" y="389" width="252.9" height="15.0" fill="rgb(206,41,38)" rx="2" ry="2" />
<text  x="713.30" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__schedule (5,624 samples, 14.95%)</title><rect x="398.7" y="213" width="146.6" height="15.0" fill="rgb(227,76,34)" rx="2" ry="2" />
<text  x="401.73" y="223.5" >__schedule</text>
</g>
<g >
<title>consume_skb (7,104 samples, 18.89%)</title><rect x="200.1" y="245" width="185.1" height="15.0" fill="rgb(250,114,24)" rx="2" ry="2" />
<text  x="203.08" y="255.5" >consume_skb</text>
</g>
<g >
<title>psi_group_change (653 samples, 1.74%)</title><rect x="478.0" y="165" width="17.0" height="15.0" fill="rgb(221,127,46)" rx="2" ry="2" />
<text  x="480.96" y="175.5" ></text>
</g>
<g >
<title>finish_task_switch (532 samples, 1.41%)</title><rect x="898.8" y="149" width="13.9" height="15.0" fill="rgb(252,224,12)" rx="2" ry="2" />
<text  x="901.84" y="159.5" ></text>
</g>
<g >
<title>sched_clock_local (404 samples, 1.07%)</title><rect x="484.4" y="117" width="10.6" height="15.0" fill="rgb(250,104,13)" rx="2" ry="2" />
<text  x="487.45" y="127.5" ></text>
</g>
<g >
<title>do_readv (16,505 samples, 43.88%)</title><rect x="157.2" y="357" width="430.0" height="15.0" fill="rgb(214,39,51)" rx="2" ry="2" />
<text  x="160.22" y="367.5" >do_readv</text>
</g>
<g >
<title>iovec_readv (17,777 samples, 47.26%)</title><rect x="148.0" y="421" width="463.1" height="15.0" fill="rgb(243,216,24)" rx="2" ry="2" />
<text  x="151.00" y="431.5" >iovec_readv</text>
</g>
<g >
<title>amd_pmu_disable_all (2,137 samples, 5.68%)</title><rect x="841.3" y="133" width="55.7" height="15.0" fill="rgb(242,65,51)" rx="2" ry="2" />
<text  x="844.32" y="143.5" >amd_p..</text>
</g>
<g >
<title>visit_groups_merge.constprop.0.isra.0 (409 samples, 1.09%)</title><rect x="900.4" y="101" width="10.7" height="15.0" fill="rgb(249,76,20)" rx="2" ry="2" />
<text  x="903.43" y="111.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (15,505 samples, 41.22%)</title><rect x="175.4" y="277" width="403.9" height="15.0" fill="rgb(233,179,50)" rx="2" ry="2" />
<text  x="178.38" y="287.5" >unix_stream_recvmsg</text>
</g>
<g >
<title>sock_write_iter (8,518 samples, 22.64%)</title><rect x="725.9" y="293" width="221.9" height="15.0" fill="rgb(253,67,23)" rx="2" ry="2" />
<text  x="728.85" y="303.5" >sock_write_iter</text>
</g>
<g >
<title>__wake_up_common (1,376 samples, 3.66%)</title><rect x="795.8" y="213" width="35.9" height="15.0" fill="rgb(226,197,13)" rx="2" ry="2" />
<text  x="798.80" y="223.5" >__w..</text>
</g>
<g >
<title>native_write_msr (863 samples, 2.29%)</title><rect x="315.5" y="37" width="22.5" height="15.0" fill="rgb(211,14,32)" rx="2" ry="2" />
<text  x="318.47" y="47.5" >n..</text>
</g>
<g >
<title>skb_release_head_state (6,554 samples, 17.42%)</title><rect x="214.4" y="229" width="170.8" height="15.0" fill="rgb(214,93,6)" rx="2" ry="2" />
<text  x="217.41" y="239.5" >skb_release_head_state</text>
</g>
<g >
<title>sock_def_readable (5,994 samples, 15.93%)</title><rect x="790.5" y="245" width="156.1" height="15.0" fill="rgb(245,177,8)" rx="2" ry="2" />
<text  x="793.46" y="255.5" >sock_def_readable</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__entry (37,318 samples, 99.21%)</title><rect x="13.9" y="517" width="972.2" height="15.0" fill="rgb(225,228,31)" rx="2" ry="2" />
<text  x="16.88" y="527.5" >camlDune__exe__Nullfs_test__entry</text>
</g>
<g >
<title>psi_task_switch (590 samples, 1.57%)</title><rect x="929.9" y="149" width="15.4" height="15.0" fill="rgb(206,33,29)" rx="2" ry="2" />
<text  x="932.92" y="159.5" ></text>
</g>
<g >
<title>p9_pollwake (1,352 samples, 3.59%)</title><rect x="796.4" y="197" width="35.3" height="15.0" fill="rgb(245,144,23)" rx="2" ry="2" />
<text  x="799.43" y="207.5" >p9..</text>
</g>
<g >
<title>main (37,318 samples, 99.21%)</title><rect x="13.9" y="597" width="972.2" height="15.0" fill="rgb(212,174,45)" rx="2" ry="2" />
<text  x="16.88" y="607.5" >main</text>
</g>
<g >
<title>amd_pmu_disable_all (2,143 samples, 5.70%)</title><rect x="282.1" y="69" width="55.9" height="15.0" fill="rgb(206,110,3)" rx="2" ry="2" />
<text  x="285.12" y="79.5" >amd_p..</text>
</g>
<g >
<title>all (37,616 samples, 100%)</title><rect x="10.0" y="661" width="980.0" height="15.0" fill="rgb(216,86,35)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>copy_user_generic_string (810 samples, 2.15%)</title><rect x="550.1" y="165" width="21.1" height="15.0" fill="rgb(215,14,43)" rx="2" ry="2" />
<text  x="553.13" y="175.5" ></text>
</g>
<g >
<title>record_times (435 samples, 1.16%)</title><rect x="483.6" y="149" width="11.4" height="15.0" fill="rgb(240,158,26)" rx="2" ry="2" />
<text  x="486.64" y="159.5" ></text>
</g>
<g >
<title>__writev (9,871 samples, 26.24%)</title><rect x="707.7" y="405" width="257.2" height="15.0" fill="rgb(240,157,15)" rx="2" ry="2" />
<text  x="710.72" y="415.5" >__writev</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,974 samples, 7.91%)</title><rect x="615.5" y="389" width="77.5" height="15.0" fill="rgb(244,226,46)" rx="2" ry="2" />
<text  x="618.52" y="399.5" >entry_SY..</text>
</g>
<g >
<title>unix_gettimeofday (3,210 samples, 8.53%)</title><rect x="611.1" y="421" width="83.7" height="15.0" fill="rgb(212,76,22)" rx="2" ry="2" />
<text  x="614.14" y="431.5" >unix_gett..</text>
</g>
<g >
<title>sock_read_iter (15,679 samples, 41.68%)</title><rect x="170.8" y="293" width="408.5" height="15.0" fill="rgb(240,48,16)" rx="2" ry="2" />
<text  x="173.85" y="303.5" >sock_read_iter</text>
</g>
<g >
<title>camlStyx__flush_buffer_1542 (11,052 samples, 29.38%)</title><rect x="694.8" y="437" width="287.9" height="15.0" fill="rgb(218,184,17)" rx="2" ry="2" />
<text  x="697.77" y="447.5" >camlStyx__flush_buffer_1542</text>
</g>
<g >
<title>__GI___readv (17,082 samples, 45.41%)</title><rect x="151.7" y="405" width="445.0" height="15.0" fill="rgb(249,121,17)" rx="2" ry="2" />
<text  x="154.67" y="415.5" >__GI___readv</text>
</g>
<g >
<title>preempt_schedule_thunk (4,314 samples, 11.47%)</title><rect x="834.2" y="197" width="112.4" height="15.0" fill="rgb(211,62,3)" rx="2" ry="2" />
<text  x="837.20" y="207.5" >preempt_sched..</text>
</g>
<g >
<title>_start (37,318 samples, 99.21%)</title><rect x="13.9" y="629" width="972.2" height="15.0" fill="rgb(253,182,23)" rx="2" ry="2" />
<text  x="16.88" y="639.5" >_start</text>
</g>
<g >
<title>camlStyx__Proto__of_iovec_345 (731 samples, 1.94%)</title><rect x="28.9" y="437" width="19.0" height="15.0" fill="rgb(226,153,5)" rx="2" ry="2" />
<text  x="31.89" y="447.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (568 samples, 1.51%)</title><rect x="774.5" y="197" width="14.8" height="15.0" fill="rgb(254,72,20)" rx="2" ry="2" />
<text  x="777.47" y="207.5" ></text>
</g>
<g >
<title>ctx_sched_in (565 samples, 1.50%)</title><rect x="516.3" y="165" width="14.7" height="15.0" fill="rgb(212,151,30)" rx="2" ry="2" />
<text  x="519.28" y="175.5" ></text>
</g>
<g >
<title>caml_leave_blocking_section (390 samples, 1.04%)</title><rect x="600.9" y="405" width="10.2" height="15.0" fill="rgb(248,1,22)" rx="2" ry="2" />
<text  x="603.90" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (855 samples, 2.27%)</title><rect x="874.7" y="101" width="22.3" height="15.0" fill="rgb(232,129,30)" rx="2" ry="2" />
<text  x="877.72" y="111.5" >n..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (4,288 samples, 11.40%)</title><rect x="273.4" y="149" width="111.7" height="15.0" fill="rgb(215,2,31)" rx="2" ry="2" />
<text  x="276.39" y="159.5" >_raw_spin_unl..</text>
</g>
<g >
<title>__perf_event_task_sched_out (2,261 samples, 6.01%)</title><rect x="279.9" y="85" width="58.9" height="15.0" fill="rgb(216,129,53)" rx="2" ry="2" />
<text  x="282.88" y="95.5" >__perf..</text>
</g>
<g >
<title>caml_leave_blocking_section (408 samples, 1.08%)</title><rect x="972.0" y="405" width="10.7" height="15.0" fill="rgb(234,41,30)" rx="2" ry="2" />
<text  x="975.02" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,861 samples, 7.61%)</title><rect x="615.9" y="373" width="74.5" height="15.0" fill="rgb(231,187,5)" rx="2" ry="2" />
<text  x="618.88" y="383.5" >do_sysca..</text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (498 samples, 1.32%)</title><rect x="842.0" y="117" width="13.0" height="15.0" fill="rgb(218,189,9)" rx="2" ry="2" />
<text  x="845.05" y="127.5" ></text>
</g>
</g>
</svg>
