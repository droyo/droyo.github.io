<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1000" height="678" onload="init(evt)" viewBox="0 0 1000 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1000.0" height="678.0" fill="url(#background)"  />
<text id="title" x="500.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="890.00" y="24" >Search</text>
<text id="ignorecase" x="974.00" y="24" >ic</text>
<text id="matched" x="890.00" y="661" > </text>
<g id="frames">
<g >
<title>camlDune__exe__Nullfs_test__serve_222 (37,184 samples, 99.14%)</title><rect x="13.9" y="469" width="971.7" height="15.0" fill="rgb(240,197,27)" rx="2" ry="2" />
<text  x="16.95" y="479.5" >camlDune__exe__Nullfs_test__serve_222</text>
</g>
<g >
<title>camlStyx__fill_buffer_1555 (19,480 samples, 51.94%)</title><rect x="163.2" y="405" width="509.0" height="15.0" fill="rgb(214,117,32)" rx="2" ry="2" />
<text  x="166.17" y="415.5" >camlStyx__fill_buffer_1555</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3,986 samples, 10.63%)</title><rect x="301.1" y="117" width="104.2" height="15.0" fill="rgb(231,170,29)" rx="2" ry="2" />
<text  x="304.11" y="127.5" >_raw_spin_un..</text>
</g>
<g >
<title>schedule_timeout (4,452 samples, 11.87%)</title><rect x="413.8" y="213" width="116.4" height="15.0" fill="rgb(237,43,44)" rx="2" ry="2" />
<text  x="416.84" y="223.5" >schedule_timeout</text>
</g>
<g >
<title>__wake_up_common_lock (5,428 samples, 14.47%)</title><rect x="263.5" y="133" width="141.8" height="15.0" fill="rgb(213,170,32)" rx="2" ry="2" />
<text  x="266.46" y="143.5" >__wake_up_common_l..</text>
</g>
<g >
<title>nullfs_test.exe (37,505 samples, 100.00%)</title><rect x="10.0" y="613" width="980.0" height="15.0" fill="rgb(250,215,33)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >nullfs_test.exe</text>
</g>
<g >
<title>iovec_writev (11,458 samples, 30.55%)</title><rect x="682.4" y="389" width="299.4" height="15.0" fill="rgb(205,141,15)" rx="2" ry="2" />
<text  x="685.43" y="399.5" >iovec_writev</text>
</g>
<g >
<title>consume_skb (6,751 samples, 18.00%)</title><rect x="228.9" y="213" width="176.4" height="15.0" fill="rgb(210,79,53)" rx="2" ry="2" />
<text  x="231.89" y="223.5" >consume_skb</text>
</g>
<g >
<title>caml_startup_common (37,184 samples, 99.14%)</title><rect x="13.9" y="533" width="971.7" height="15.0" fill="rgb(243,206,18)" rx="2" ry="2" />
<text  x="16.95" y="543.5" >caml_startup_common</text>
</g>
<g >
<title>read_hpet (2,949 samples, 7.86%)</title><rect x="590.6" y="293" width="77.0" height="15.0" fill="rgb(251,62,44)" rx="2" ry="2" />
<text  x="593.55" y="303.5" >read_hpet</text>
</g>
<g >
<title>camlStyx__server_loop_2255 (37,184 samples, 99.14%)</title><rect x="13.9" y="437" width="971.7" height="15.0" fill="rgb(241,6,29)" rx="2" ry="2" />
<text  x="16.95" y="447.5" >camlStyx__server_loop_2255</text>
</g>
<g >
<title>alloc_skb_with_frags (1,972 samples, 5.26%)</title><rect x="750.5" y="197" width="51.5" height="15.0" fill="rgb(254,103,37)" rx="2" ry="2" />
<text  x="753.52" y="207.5" >alloc..</text>
</g>
<g >
<title>__perf_event_task_sched_out (2,299 samples, 6.13%)</title><rect x="306.1" y="53" width="60.0" height="15.0" fill="rgb(208,94,53)" rx="2" ry="2" />
<text  x="309.05" y="63.5" >__perf..</text>
</g>
<g >
<title>do_iter_write (9,670 samples, 25.78%)</title><rect x="697.2" y="293" width="252.7" height="15.0" fill="rgb(253,177,10)" rx="2" ry="2" />
<text  x="700.24" y="303.5" >do_iter_write</text>
</g>
<g >
<title>do_writev (10,133 samples, 27.02%)</title><rect x="690.7" y="325" width="264.7" height="15.0" fill="rgb(240,158,15)" rx="2" ry="2" />
<text  x="693.66" y="335.5" >do_writev</text>
</g>
<g >
<title>_start (37,184 samples, 99.14%)</title><rect x="13.9" y="597" width="971.7" height="15.0" fill="rgb(232,5,16)" rx="2" ry="2" />
<text  x="16.95" y="607.5" >_start</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (4,084 samples, 10.89%)</title><rect x="840.1" y="181" width="106.8" height="15.0" fill="rgb(208,163,7)" rx="2" ry="2" />
<text  x="843.15" y="191.5" >_raw_spin_unl..</text>
</g>
<g >
<title>preempt_schedule (3,918 samples, 10.45%)</title><rect x="302.9" y="85" width="102.4" height="15.0" fill="rgb(226,10,3)" rx="2" ry="2" />
<text  x="305.89" y="95.5" >preempt_sche..</text>
</g>
<g >
<title>amd_pmu_disable_all (2,185 samples, 5.83%)</title><rect x="421.7" y="149" width="57.1" height="15.0" fill="rgb(213,80,52)" rx="2" ry="2" />
<text  x="424.73" y="159.5" >amd_pm..</text>
</g>
<g >
<title>vfs_readv (13,946 samples, 37.18%)</title><rect x="192.6" y="309" width="364.4" height="15.0" fill="rgb(210,214,49)" rx="2" ry="2" />
<text  x="195.62" y="319.5" >vfs_readv</text>
</g>
<g >
<title>sock_write_iter (9,333 samples, 24.88%)</title><rect x="704.2" y="261" width="243.9" height="15.0" fill="rgb(253,8,50)" rx="2" ry="2" />
<text  x="707.24" y="271.5" >sock_write_iter</text>
</g>
<g >
<title>__schedule (4,357 samples, 11.62%)</title><rect x="416.3" y="181" width="113.9" height="15.0" fill="rgb(209,151,23)" rx="2" ry="2" />
<text  x="419.32" y="191.5" >__schedule</text>
</g>
<g >
<title>sock_alloc_send_pskb (2,361 samples, 6.30%)</title><rect x="741.6" y="213" width="61.7" height="15.0" fill="rgb(252,214,6)" rx="2" ry="2" />
<text  x="744.58" y="223.5" >sock_a..</text>
</g>
<g >
<title>unix_write_space (5,511 samples, 14.69%)</title><rect x="261.3" y="149" width="144.0" height="15.0" fill="rgb(252,229,52)" rx="2" ry="2" />
<text  x="264.29" y="159.5" >unix_write_space</text>
</g>
<g >
<title>skb_release_head_state (5,990 samples, 15.97%)</title><rect x="248.8" y="197" width="156.5" height="15.0" fill="rgb(235,17,5)" rx="2" ry="2" />
<text  x="251.77" y="207.5" >skb_release_head_state</text>
</g>
<g >
<title>schedule (4,387 samples, 11.70%)</title><rect x="415.5" y="197" width="114.7" height="15.0" fill="rgb(207,70,47)" rx="2" ry="2" />
<text  x="418.54" y="207.5" >schedule</text>
</g>
<g >
<title>sock_read_iter (13,304 samples, 35.47%)</title><rect x="201.8" y="261" width="347.6" height="15.0" fill="rgb(227,132,35)" rx="2" ry="2" />
<text  x="204.79" y="271.5" >sock_read_iter</text>
</g>
<g >
<title>caml_program (37,184 samples, 99.14%)</title><rect x="13.9" y="501" width="971.7" height="15.0" fill="rgb(252,189,27)" rx="2" ry="2" />
<text  x="16.95" y="511.5" >caml_program</text>
</g>
<g >
<title>__GI___readv (14,700 samples, 39.19%)</title><rect x="182.5" y="373" width="384.1" height="15.0" fill="rgb(247,223,7)" rx="2" ry="2" />
<text  x="185.51" y="383.5" >__GI___readv</text>
</g>
<g >
<title>ktime_get_real_ts64 (2,991 samples, 7.97%)</title><rect x="589.5" y="309" width="78.1" height="15.0" fill="rgb(229,59,48)" rx="2" ry="2" />
<text  x="592.46" y="319.5" >ktime_get..</text>
</g>
<g >
<title>unix_stream_recvmsg (13,135 samples, 35.02%)</title><rect x="206.2" y="245" width="343.2" height="15.0" fill="rgb(244,181,16)" rx="2" ry="2" />
<text  x="209.21" y="255.5" >unix_stream_recvmsg</text>
</g>
<g >
<title>__schedule (3,895 samples, 10.39%)</title><rect x="303.5" y="69" width="101.7" height="15.0" fill="rgb(220,193,38)" rx="2" ry="2" />
<text  x="306.46" y="79.5" >__schedule</text>
</g>
<g >
<title>do_syscall_64 (10,280 samples, 27.41%)</title><rect x="689.0" y="341" width="268.6" height="15.0" fill="rgb(219,28,28)" rx="2" ry="2" />
<text  x="691.98" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>__wake_up_common_lock (5,418 samples, 14.45%)</title><rect x="805.3" y="197" width="141.6" height="15.0" fill="rgb(248,227,35)" rx="2" ry="2" />
<text  x="808.31" y="207.5" >__wake_up_common_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (14,576 samples, 38.86%)</title><rect x="184.3" y="357" width="380.9" height="15.0" fill="rgb(225,65,16)" rx="2" ry="2" />
<text  x="187.31" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>camlDune__exe__Nullfs_test__entry (37,184 samples, 99.14%)</title><rect x="13.9" y="485" width="971.7" height="15.0" fill="rgb(251,183,34)" rx="2" ry="2" />
<text  x="16.95" y="495.5" >camlDune__exe__Nullfs_test__entry</text>
</g>
<g >
<title>camlStyx__f_2232 (35,795 samples, 95.44%)</title><rect x="48.7" y="421" width="935.3" height="15.0" fill="rgb(215,229,31)" rx="2" ry="2" />
<text  x="51.67" y="431.5" >camlStyx__f_2232</text>
</g>
<g >
<title>sock_sendmsg (9,208 samples, 24.55%)</title><rect x="707.5" y="245" width="240.6" height="15.0" fill="rgb(219,209,49)" rx="2" ry="2" />
<text  x="710.51" y="255.5" >sock_sendmsg</text>
</g>
<g >
<title>main (37,184 samples, 99.14%)</title><rect x="13.9" y="565" width="971.7" height="15.0" fill="rgb(235,123,49)" rx="2" ry="2" />
<text  x="16.95" y="575.5" >main</text>
</g>
<g >
<title>__writev (10,716 samples, 28.57%)</title><rect x="685.2" y="373" width="280.0" height="15.0" fill="rgb(221,24,35)" rx="2" ry="2" />
<text  x="688.17" y="383.5" >__writev</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,310 samples, 8.83%)</title><rect x="584.4" y="357" width="86.5" height="15.0" fill="rgb(249,22,46)" rx="2" ry="2" />
<text  x="587.39" y="367.5" >entry_SYSC..</text>
</g>
<g >
<title>__perf_event_task_sched_out (2,302 samples, 6.14%)</title><rect x="419.7" y="165" width="60.2" height="15.0" fill="rgb(250,74,47)" rx="2" ry="2" />
<text  x="422.74" y="175.5" >__perf..</text>
</g>
<g >
<title>preempt_schedule_thunk (3,926 samples, 10.47%)</title><rect x="302.7" y="101" width="102.6" height="15.0" fill="rgb(212,210,8)" rx="2" ry="2" />
<text  x="305.68" y="111.5" >preempt_sche..</text>
</g>
<g >
<title>do_iter_read (13,684 samples, 36.49%)</title><rect x="194.2" y="293" width="357.6" height="15.0" fill="rgb(237,214,34)" rx="2" ry="2" />
<text  x="197.19" y="303.5" >do_iter_read</text>
</g>
<g >
<title>__vdso_gettimeofday (3,427 samples, 9.14%)</title><rect x="582.0" y="373" width="89.5" height="15.0" fill="rgb(220,215,39)" rx="2" ry="2" />
<text  x="584.96" y="383.5" >__vdso_get..</text>
</g>
<g >
<title>sock_wfree (5,870 samples, 15.65%)</title><rect x="251.9" y="165" width="153.4" height="15.0" fill="rgb(209,201,34)" rx="2" ry="2" />
<text  x="254.91" y="175.5" >sock_wfree</text>
</g>
<g >
<title>do_iter_readv_writev (13,461 samples, 35.89%)</title><rect x="197.7" y="277" width="351.7" height="15.0" fill="rgb(206,76,21)" rx="2" ry="2" />
<text  x="200.69" y="287.5" >do_iter_readv_writev</text>
</g>
<g >
<title>__libc_start_main (37,184 samples, 99.14%)</title><rect x="13.9" y="581" width="971.7" height="15.0" fill="rgb(254,79,12)" rx="2" ry="2" />
<text  x="16.95" y="591.5" >__libc_start_main</text>
</g>
<g >
<title>unix_stream_sendmsg (9,069 samples, 24.18%)</title><rect x="711.1" y="229" width="237.0" height="15.0" fill="rgb(240,71,45)" rx="2" ry="2" />
<text  x="714.14" y="239.5" >unix_stream_sendmsg</text>
</g>
<g >
<title>do_syscall_64 (14,259 samples, 38.02%)</title><rect x="185.4" y="341" width="372.6" height="15.0" fill="rgb(245,175,35)" rx="2" ry="2" />
<text  x="188.41" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>iovec_readv (15,346 samples, 40.92%)</title><rect x="179.3" y="389" width="401.0" height="15.0" fill="rgb(226,44,39)" rx="2" ry="2" />
<text  x="182.30" y="399.5" >iovec_readv</text>
</g>
<g >
<title>caml_main (37,184 samples, 99.14%)</title><rect x="13.9" y="549" width="971.7" height="15.0" fill="rgb(227,59,44)" rx="2" ry="2" />
<text  x="16.95" y="559.5" >caml_main</text>
</g>
<g >
<title>vfs_writev (9,972 samples, 26.59%)</title><rect x="694.9" y="309" width="260.5" height="15.0" fill="rgb(235,11,5)" rx="2" ry="2" />
<text  x="697.86" y="319.5" >vfs_writev</text>
</g>
<g >
<title>preempt_schedule (4,013 samples, 10.70%)</title><rect x="842.0" y="149" width="104.9" height="15.0" fill="rgb(245,162,0)" rx="2" ry="2" />
<text  x="845.00" y="159.5" >preempt_sche..</text>
</g>
<g >
<title>__x64_sys_gettimeofday (3,147 samples, 8.39%)</title><rect x="585.4" y="325" width="82.2" height="15.0" fill="rgb(230,87,12)" rx="2" ry="2" />
<text  x="588.38" y="335.5" >__x64_sys..</text>
</g>
<g >
<title>do_syscall_64 (3,220 samples, 8.59%)</title><rect x="584.9" y="341" width="84.1" height="15.0" fill="rgb(227,109,13)" rx="2" ry="2" />
<text  x="587.88" y="351.5" >do_syscal..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,567 samples, 28.17%)</title><rect x="687.3" y="357" width="276.1" height="15.0" fill="rgb(208,213,6)" rx="2" ry="2" />
<text  x="690.31" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>caml_start_program (37,184 samples, 99.14%)</title><rect x="13.9" y="517" width="971.7" height="15.0" fill="rgb(240,132,47)" rx="2" ry="2" />
<text  x="16.95" y="527.5" >caml_start_program</text>
</g>
<g >
<title>amd_pmu_disable_all (2,198 samples, 5.86%)</title><rect x="307.8" y="37" width="57.4" height="15.0" fill="rgb(240,2,0)" rx="2" ry="2" />
<text  x="310.80" y="47.5" >amd_pm..</text>
</g>
<g >
<title>unix_destruct_scm (5,944 samples, 15.85%)</title><rect x="250.0" y="181" width="155.3" height="15.0" fill="rgb(246,67,4)" rx="2" ry="2" />
<text  x="252.98" y="191.5" >unix_destruct_scm</text>
</g>
<g >
<title>amd_pmu_disable_all (2,188 samples, 5.83%)</title><rect x="848.7" y="101" width="57.2" height="15.0" fill="rgb(241,183,43)" rx="2" ry="2" />
<text  x="851.74" y="111.5" >amd_pm..</text>
</g>
<g >
<title>unix_gettimeofday (3,517 samples, 9.38%)</title><rect x="580.3" y="389" width="91.9" height="15.0" fill="rgb(229,59,1)" rx="2" ry="2" />
<text  x="583.28" y="399.5" >unix_getti..</text>
</g>
<g >
<title>__schedule (3,974 samples, 10.60%)</title><rect x="843.0" y="133" width="103.9" height="15.0" fill="rgb(252,222,42)" rx="2" ry="2" />
<text  x="846.02" y="143.5" >__schedule</text>
</g>
<g >
<title>unix_stream_read_generic (13,073 samples, 34.86%)</title><rect x="207.8" y="229" width="341.6" height="15.0" fill="rgb(216,112,46)" rx="2" ry="2" />
<text  x="210.83" y="239.5" >unix_stream_read_generic</text>
</g>
<g >
<title>preempt_schedule_thunk (4,021 samples, 10.72%)</title><rect x="841.8" y="165" width="105.1" height="15.0" fill="rgb(253,223,51)" rx="2" ry="2" />
<text  x="844.79" y="175.5" >preempt_sche..</text>
</g>
<g >
<title>all (37,505 samples, 100%)</title><rect x="10.0" y="629" width="980.0" height="15.0" fill="rgb(214,29,21)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (2,327 samples, 6.20%)</title><rect x="846.1" y="117" width="60.8" height="15.0" fill="rgb(213,91,2)" rx="2" ry="2" />
<text  x="849.13" y="127.5" >__perf..</text>
</g>
<g >
<title>do_readv (14,137 samples, 37.69%)</title><rect x="187.6" y="325" width="369.4" height="15.0" fill="rgb(251,65,41)" rx="2" ry="2" />
<text  x="190.63" y="335.5" >do_readv</text>
</g>
<g >
<title>camlStdlib__fun__protect_139 (37,184 samples, 99.14%)</title><rect x="13.9" y="453" width="971.7" height="15.0" fill="rgb(249,178,37)" rx="2" ry="2" />
<text  x="16.95" y="463.5" >camlStdlib__fun__protect_139</text>
</g>
<g >
<title>camlStyx__flush_buffer_1542 (11,850 samples, 31.60%)</title><rect x="672.2" y="405" width="309.6" height="15.0" fill="rgb(238,201,16)" rx="2" ry="2" />
<text  x="675.18" y="415.5" >camlStyx__flush_buffer_1542</text>
</g>
<g >
<title>sock_def_readable (5,497 samples, 14.66%)</title><rect x="803.3" y="213" width="143.6" height="15.0" fill="rgb(236,219,3)" rx="2" ry="2" />
<text  x="806.28" y="223.5" >sock_def_readable</text>
</g>
<g >
<title>do_iter_readv_writev (9,466 samples, 25.24%)</title><rect x="700.8" y="277" width="247.3" height="15.0" fill="rgb(224,20,36)" rx="2" ry="2" />
<text  x="703.77" y="287.5" >do_iter_readv_writev</text>
</g>
</g>
</svg>
